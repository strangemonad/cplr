                        Index


[This index is not part of the standard definition of the Ada programming 
language.]

An entry exists in this index for each technical term or phrase that is 
defined in the reference manual.  The term or phrase is in boldface and is 
followed by the section number where it is defined, also in boldface, for 
example:

        Record aggregate 4.3.1

References to other sections that provide additional information are shown 
after a semicolon, for example:

        Record aggregate 4.3.1.; 4.3

References to other related entries in the index follow in brackets, and a 
line that is indented below a boldface entry gives the section numbers where 
particular uses of the term or phrase can be found; for example:

        Record aggregate 4.3.1; 4.3
          [see also: aggregate]
             as a basic operation 3.3.3; 3.7.4 
             in a code statement  13.8

The index also contains entries for different parts of a phrase, entries that 
correct alternative terminology, and entries directiong the reader to 
information otherwise hard to find, for example:

        Check
          [see:  suppress pragma]



Abandon elaboration or evaluation (of declarations or statements)
  [see: exception, raise statement] 

Abnormal task 9.10; 9.9
  [see also: abort statement]
     as recipient of an entry call 9.7.2, 9.7.3, 11.5; 9.5
     raising tasking_error in a calling task 11.5; 9.5 

Abort statement 9.10
  [see also: abnormal task, statement, task]
     as a simple statement 5.1

Abs unary operator 4.5.6; 4.5
  [see also: highest precedence operator]
     as an operation of fixed point type 3.5.10
     as an operation of a floating point type 3.5.8
     as an operation of an integer type 3.5.5
     in a factor 4.4 

Absolute value operation 4.5.6 

Accept alternative (of a selective wait) 9.7.1
     for an interrupt entry 13.5.1 

Accept statement 9.5; 9, D
  [see also: entry call statement, simple name in..., statement, task]
     accepting a conditional entry call 9.7.2
     accepting a timed entry call 9.7.3
     and optimization with exceptions 11.6
     as a compound statement 5.1
     as part of a declarative region 8.1
     entity denoted by an expanded name 4.1.3
     in an abnormal task 9.1 8
     in a select alternative 9.7.1
     including an exit statement 5.7
     including a goto statement 5.9
     including a return statement 5.8
     raising an exception 11.5
     to communicate values 9.11 

Access to external files 14.2

Access type 3.8; 3.3, D
  [see also: allocator, appropriate for a type, class of type, collection,
  derived type of an access type, null access value, object designated by...]
     as a derived type 3.4
     as a generic formal type 12.1.2, 12.3.5
     deallocation [see: unchecked_deallocation]
     designating a limited type 7.4.4   
     designating a task type determining task dependence 9.4
     formal parameter 6.2
     name in a controlled pragma 4.8
     object initialization 3.2.1
     operation 3.8.2
     prefix 4.1
     value designating an object 3.2, 4.8
     value designating an object with discriminants 5.2
     with a discriminant constraint 3.7.2
     with an index constraint 3.6.1 

Access type definition 3.8; 3.3.1, 12.1.2
     as a generic type definition 12.1 

Access_check
  [see: constraint_error, suppress] 

Accuracy
     of a numeric operation 4.5.7
     of a numeric operation of a universal type 4.10

Activation
  [see: task activation] 

Actual object
  [see: generic actual object] 

Actual parameter 6.4.1; D; (of an operator) 6.7; (of a subprogram) 6.4;
6.2, 6.3
  [see also: entry call, formal parameter, function call, procedure call
  statement, subprogram call]
     characteristics and overload resolution 6.6
     in a generic instantiation [see: generic actual parameter]
     of an array type 3.6.1
     of a record type 3.7.2
     of a task type 9.2
     that is an array aggregate 4.3.2
     that is a loop parameter 5.5 

Actual parameter part 6.4
     in a conditional entry call 9.7.2
     in an entry call statement 9.5
     in a function call 6.4
     in a procedure call statement 6.4
     in a timed entry call 9.7.3 

Actual part
  [see: actual parameter part, generic actual part] 

Actual subprogram
  [see: generic actual subprogram] 

Actual type
  [see: generic actual type] 

Adding operator
  [see: binary adding operator, unary adding operator] 

Addition operation 4.5.3
     accuracy for a real type 4.5.7 

ADDRESS (predefined attribute) 13.7.2; 3.5.5, 3.5.8, 3.5.10, 3.6.2, 3.7.4,
3.8.2, 7.4.2, 9.9, 13.7, A
  [see also: system.address]

ADDRESS (predefined type)
  [see: system.address] 

Address clause 13.5; 13.1, 13.7
  [see also: storage address, system.address]
     as a representation clause 13.1
     for an entry 13.5.1 

AFT (predefined attribute) for a fixed point
        type 3.5.10; A 

Aft field of text_io input or output 14.3.8, 14.3.10

Aggregate 4.3, D
  [see also: array aggregate, overloading of..., record aggregate]
     as a basic operation 3.3.3; 3.6.2, 3.7.4
     as a primary 4.4
     in an allocator 4.8
     in a code statement 13.8
     in an enumeration representation clause 13.3
     in a qualified expression 4.7
     may not be the argument of a conversion 4.6
     of a derived type 3.4
     of a generic formal type 12.1.2 

Alignment clause (in a record representation clause) 13.4

All in a selected component 4.1.3 

Allocation of processing resources 9.8 

Allocator 4.8; 3.8, D
  [see also: access type, collection, exception raised during..., initial
  value, object, overloading of...]
     as a basic operation 3.3.3; 3.8.2
     as a primary 4.4
     creating an object with a discriminant 4.8; 5.2
     for an array type 3.6.1
     for a generic formal access type 12.1.2
     for a private type 7.4.1
     for a record type 3.7.2
     for a task type 9.2; 9.3
     must not be the argument of a conversion 4.6         
     raising storage_error due to the size of the collection being
     exceeded 11.1
     setting a task value 9.2
     without storage check 11.7

Allowed 1.6 

Alternative
  [see: accept alternative, case statement alternative, closed alternative,
  delay alternative, open alternative, select alternative, selective wait,
  terminate alternative]

Ambiguity
  [see: overloading]  

Ampersand
  [see: catenation]
     character 2.1
     delimiter 2.2 

Ancestor library unit 10.2 

And operator
  [see: logical operator] 

And then control form
  [see: short circuit control form] 

Anonymous type 3.3.1; 3.5.4, 3.5.7, 3.5.9,3.6, 9.1
     anonymous base type [see: first named subtype]

ANSI (american national standards institute) 2.1 

Apostrophe character 2.1
     in a character literal 2.5 

Apostrophe delimiter 2.2
     in an attribute 4.1.4
     of a qualified expression 4.7 

Apply 10.1.1

Appropriate for a type 4.1
     for an array type 4.1.1, 4.1.2
     for a record type 4.1.3
     for a task type 4.1.3
     prefix of an attribute 4.1.4 

Arbitrary selection of select alternatives 9.7.1 

Argument association in a pragma 2.8 

Argument identifier in a pragma 2.8 

Arithmetic operator 4.5
  [see also: binary adding operator, exponentiating operator, multiplying
  operator, predefined operator, unary adding operator]
     as an operation of a fixed point type 3.5.10
     as an operation of a floating point type 3.5.5
     as an operation of an integer type 3.5.5
     rounding for real types 13.7.3 

Array aggregate 4.3.2; 4.3
  [see also: aggregate]
     as a basic operation 3.3.3; 3.6.2
     in an enumeration representation clause 13.3 

Array assignment 5.2.1 

Array bounds
  [see: bounds of an array] 

Array component
  [see: array type, component, indexed component] 

Array type 3.6; 3.3, D
  [see also: component, composite type, constrained array, constrained...,
  index, matching components, null slice, slice, unconstrained...]
     as a full type 7.4.1
     as a generic formal type 12.1.2
     as a generic parameter 12.3.4
     as the type of a formal parameter 6.2
     conversion 4.6
     for a prefix of an indexed component 4.1.1
     for a prefix of a slice 4.1.2            
     operation 3.6.2; 4.5.2, 4.5.3
     operation on an array of boolean components 4.5.1, 4.5.6
     with a component type with discriminants 3.7.2
     with a limited component type 7.4.4 

Array type definition 3.6; 3.3.1, 12.1.2, 12.3.4
  [see also: constrained array definition, elaboration of...,
  unconstrained array definition]
     as a generic type definition 12.1 

Arrow compound delimiter 2.2 

ASCII (american standard code for information interchange) 2.1

ASCII (predefined library package) 3.5.2; 2.6, C
  [see also: graphical symbol] 

Assignment compound delimiter 2.2; 5.2
     in an object declaration 3.2.1 

Assignment operation 5.2; D
  [see also: initial value, limited type]
     as a basic operation 3.3, 3.3.3; 3.5.5, 3.5.8, 3.5.10, 3.6.2, 3.7.4,
     3.8.2, 7.4.2, 12.1.2
     for a generic formal type 12.1.2
     not available for a limited type 7.4.4
     of an array aggregate 4.3.2
     of an initial value to an object 3.2.1
     to an array variable 5.2.1; 5.2
     to a loop parameter 5.5
     to an object designated by an access value 3.8
     to a shared variable 9.11 

Assignment statement 5.2; D
  [see also: statement]
     as a simple statement 5.1 

Associated declarative region of a declaration or statement 8.1

Association
  [see: component association, discriminant association, generic
  association, parameter associaion]

Attribute 4.1.4; D
  [see also: predefined attribute, representation attribute]
     as a basic operation 3.3.3
     as a name 4.1
     as a primary 4.4
     in a length clause 13.2
     in a static expression in a generic unit 12.1
     of an access type 3.5.8
     of an array type 3.6.2
     of a derived type 3.4
     of a discrete type or subtype 3.5.5
     of an entry 9.9
     of a fixed point type 3.5.10
     of an object of a task type 9.9
     of a static subtype in a static expression 4.9
     of a task type 9.9
     of a type 3.3
     of a type as a generic actual function 12.3.6
     of a type with discriminants 3.7.4
     renamed as a function 8.5
     that is a function 3.5.5
 
Attribute designator 4.1.4

Bar
  [see: vertical bar] 

BASE (predefined attribute) 3.3.3; A
     for an access type 3.8.2
     for an array type 3.6.2
     for a discrete type 3.5.5
     for a fixed point type 3.5.10
     for a floating point type 3.5.8
     for a private type 7.4.2
     for a record type 3.7.4 

Base type (of a subtype) 3.3
     as a static subtype 4.9
     as target type of a conversion 4.6
     due to elaboration of a type definition 3.3.1
     name [see: name of a base type]
     of an array type 3.6; 4.1.2
     of a derived subtype 3.4
     of a discriminant determining the set of choices of a variant part 3.7.3
     of a fixed point type 3.5.9
     of a floating point type 3.5.7
     of a formal parameter of a generic formal subprogram 12.1.3
     of an integer type 3.5.4
     of a parent subtype 3.4
     of a qualified expression 4.7
     of a type mark 3.3.2
     of a type mark in a membership test 4.5.2
     of the discrete range in a loop parameter specification 5.5
     of the expression in a case statement 5.4
     of the result of a generic formal function 12.1.3
     of the result subtype of a function 5.8 
     of the subtype indication in an access type definition 3.8
     of the type in the declaration of a generic formal object 12.1.1
     of the type mark in a renaming declaration 8.5 

Based literal 2.4.2; 14.3.7
  [see also: colon character, sharp character]
     as a numeric literal 2.4 

Basic character 2.1
  [see also: basic graphic character, character] 

Basic character set 2.1
     is sufficient for a program text 2.10

Basic declaration 3.1
     as a basic declarative item 3.9 

Basic declarative item 3.9
     in a package specification 7.1; 7.2 

Basic graphic character 2.1
  [see also: basic character, digit, graphic character, space character,
  special character, upper case letter]

Basic operation 3.3.3
  [see also: operation, scope of..., visibility...]
     accuracy for a real type 4.5.7
     implicitly declared 3.1, 3.3.3
     of an access type 3.8.2
     of an array type 3.6.2
     of a derived type 3.4
     of a discrete type 3.5.5
     of a fixed point type 3.5.10
     of a floating point type 3.5.8
     of a limited type 7.4.4
     of a private type 7.4.2
     of a record type 3.7.4
     of a task type 9.9
     propagating an exception 11.6
     raising an exception 11.4.1
     which is an attribute 4.1.4 

Belong
     to a range 3.5
     to a subtype 3.3
     to a subtype of an access type 3.8 

Binary adding operator 4.5; 4.5.3, C
  [see also: arithmetic operator, overloading of an operator]
     for time predefined type 9.6
     in a simple expression 4.4
     overloaded 6.7 

Binary operation 4.5 

Bit
  [see: storage bits]    

Blank skipped by a text_io procedure 14.3.5 

Block name 5.6
     declaration 5.1
     implicitly declared 3.1 

Block statement 5.6; D
  [see also: completed block statement, statement]
     as a compound statement 5.1
     as a declarative region 8.1
     entity denoted by an expanded name 4.1.3
     having dependent tasks 9.4
     including an exception handler 11.2; 11
     including an implicit declaration 5.1
     including a suppress pragma 11.7
     raising an exception 11.4.1, 11.4.2 

Body 3.9; D
  [see also: declaration, generic body, generic package body, generic
  subprogram body, library unit, package body, proper body, subprogram
  body, task body]
     as a later declarative item 3.9 

Body stub 10.2; D
     acting as a subprogram declaration 6.3
     as a body 3.9
     as a portion of a declarative region 8.1
     must be in the same declarative part as the declaration 3.9, 7.1

BOOLEAN (predefined type) 3.5.3; C
     derived 3.4; 3.5.3
     result of a condition 5.3
     result of an explicitly declared equality operator 6.7

Boolean expression
  [see: condition, expression] 

Boolean operator
  [see: relational operator] 

Boolean type 3.5.3
  [see also: derived type of a boolean type, predefined type]
     operaion 3.55; 4.5.1, 4.5.2, 4.5.6
     operation comparing real operands 4.5.7
 
Bound
  [see: error bound, first attribute, last attribute] 

Bound of an array 3.6, 3.6.1
  [see also: index range, slice]
     aggregate 4.3.2
     ignored due to index_check suppression 11.7
     initialization in an allocator constrains the allocated object 4.8
     result of an operation 4.5.1, 4.5.3, 4.5.6 

Bound of a range 3.5; 3.5.4
     of a discrete range in a slice 4.1.2
     of a discrete range is of universal_integer type 3.6.1
     of a static discrete range 4.9

Bound of a scalar type 3.5

Bound of a slice 4.1.2 

Box compound delimiter 2.2
     in a generic parameter declaration 12.1, 12.1.2, 12.1.3; 12.3.3
     in an index subtype definition 3.6 

Bracket
  [see: label bracket, left parenthesis, parenthesised expression, right
  parenthesis, string bracket]


CALENDAR (predefined library package) 9.6; C

Call
  [see: conditional entry call, entry call statement, function call,
  procedure call statement, subprogram call, timed entry call]

CALLABLE (predefined attribute)
     for an abnormal task 9.10
     for a task object 9.9; A

Calling conventions
  [see: subprogram declaration]
     of another language system 13.9 

Cancelation of an entry call statement 9.7.2, 9.7.3 

Carriage return format effector 2.1 

Case of a letter
  [see: letter, lower case letter, upper case letter]

Case statement 5.4
  [see also: statement]
     as a compound statement 5.1 

Case statement alternative 5.4 

Catenation operation 4.5.3
     for an array type 3.6.2
     in a replacement of a string literal 2.10

Catenation operator 4.5; 2.6, 3.6.3, 4.5.3, C
  [see also: predefined operator]

Character 2.1
  [see also: ampersand, apostrophe, basic character, colon, divide, dot,
  equal, exclamation mark character, graphic character, greater than,
  hyphen, less than, minus, other special character, parenthesis, percent,
  period, plus, point character, pound sterling, quotation, semicolon,
  sharp, space, special character, star, underline, vertical bar]
     in a lexical element 2, 2.2
     names of characters 2.1
     replacement in program text 2.10

CHARACTER (predefined type) 3.5.2; C
     as the component type of the string type 3.6.3 

Character literal 2.5, 3.5.2, 4.2
  [see also: scope of..., space character literal, visibility of...]
     as a basic operation 3.3.3
     as an enumeration literal 3.5.1
     as a name 4.1
     as a selector 4.1.3
     declared by an enumeration literal specification 3.1
     in a static expression 4.9
     in homograph declarations 8.3
     must be visible at the place of a string literal 4.2

Character types 3.5.2; 2.5
     operation 3.5.5
     subject to an attribute 3.5.5

Check
  [see: suppress pragma] 

Choice 3.7.3
  [see also: exception choice]
     in an aggregate 4.3
     in an array aggregate 4.3.2
     in a case statement alternative 5.4
     in a component association 4.3, 4.3.1, 4.3.2
     in a record aggregate 4.3.1
     in a variant of a record type definition 3.7.3 

Circularity in dependencies between compilation units 10.5

Class of type 3.3; 12.1.2
  [see also: access type, composite type, private type, scalar type,
  task type]
     of a derived type 3.4 

Clause
  [see: address clause, alignment clause, component clause, context clause,
  enumeration representation clause, length clause, record representation
  clause, representation clause, use clause, with clause]

CLOCK (predefined function) 9.6  
  [see also: system.tick] 

CLOSE (input-output procedure)
     in an instance of direct_io 14.2.1; 14.2.5
     in an instance of sequential_io 14.2.1, 14.2.3
     in text_io 14.2.1; 14.3.10

Closed alternative (of a selective wait) 9.7.1; 11.1
  [see also: alternative] 

Closed file 14.1 

Code statement 13.8
  [see also: statement]
     as a simple statement 5.1 

COL (text_io function) 14.3.4; 14.3.10
        raising an exception 14.4

Collection (of an access type) 3.8, 4.8; D
  [see also: access type, allocator, length clause, object, storage units
  allocated, storage_size attribute]
     of a derived access type 13.2; 3.4 

Colon character 2.1
  [see also: based literal]
     replacing sharp character 2.10

Colon delimiter 2.2 

Column 14.3.4 

Comma
     character 2.1
     delimiter 2.2 

Comment 2.7; 2.2
     in a conforming construct 6.3.1 

Communication
     between tasks [see: accept statement, entry, rendezvous]
     of values between tasks 9.5, 9.11 

Comparison
  [see: relational operator] 

Compatibility (of constraints) 3.3.2
  [see also: constraint]
     failure not causing constraint_error 11.7
     of a discrete range with an index subtype 3.6.1
     of discriminant constraints 3.7.2
     of fixed point constraints 3.5.9
     of floating point constraints 3.5.7
     of index constraints 3.6.1
     of range constraints 3.5 

Compilation 10.1; 10, 10.4
     as a sequence of lexical elements 2
     including an inline pragma 6.3.2 

Compilation order
  [see: order of compilation] 

Compilation unit 10.1; D, 10, 10.4, D
  [see also: library unit, secondary unit]
     compiled after library units named in its context clause 10.3
     followed by an inline pragma 6.3.2 
     with a context clause 10.1.1
     with a use clause 8.4 

Compile time evaluation of expressions 10.6; 4.9 

Compiler 10.4 

Compiler listing
  [see: list pragma, page pragma] 

Compiler optimization
  [see: optimization, optimize pragma] 

Completed block statement 9.4 

Completed subprogram 9.4 

Completed task 9.4; 9.9
  [see also: tasking_error, terminated task]
     as recipient of an entry call 9.5, 9.7.2, 9.7.3
     becoming abnormal 9.10
     completion during activation 9.3
     due to an exception in the task body 11.4.1, 11.4.2

Component (of a composite type) 3.3; 3.6, 3.7, D
  [see also: component association, component clause, component list,
  composite type, default expression, dependence on a discriminant,
  discriminant, indexed component, object, record type, selected component,
  subcomponent]
     combined by aggregate 4.3
     depending on a discriminant 3.7.1; 11.1
     name starting with a prefix 4.1
     of an array 3.6 [see also: array type]
     of a constant 3.2.1
     of a derived type 3.4
     of an object 3.2
     of a private type 7.4.2
     of a record 3.7 [see also: record type]
     of a variable 3.2.1
     simple name as a choice 3.7.3
     subtype 3.7
     subtype itself a composite type 3.6.1, 3.7.2
     that is a task object 9.3
     whose type is a limited type 7.4.4 

Component association 4.3
     in an aggregate 4.3
     including an expression which is an array aggregate 4.3.2
     named component association 4.3
     named component association for selective visibility 8.3
     positional component association 4.3    

Component clause (in a record representation clause) 13.4

Component declaration 3.7
  [see also: declaration, record type definition]
     as part of a basic declaration 3.1
     having an extended scope 8.2
     in a component list 3.7
     of an array object 3.6.1
     of a record object 3.7.2
     visibility 8.3 

Component list 3.7
     in a record type definition 3.7
     in a variant 3.7.3 

Component subtype definition 3.7
  [see also: dependence on a discriminant]
     in a component declaration 3.7 

Component type
     catenation with an array type 4.5.3
     object initialization [see: initial value]
     of an expression in an array aggregate 4.3.2
     of an expression in a record aggregate 4.3.1
     of a generic formal array type 12.3.4
     operation determining a composite type operation 4.5.1, 4.5.2

Composite type 3.3; 3.6, 3.7, D 
  [see also: array type, class of type, component, discriminant, record
  type, subcomponent]
     including a limited subcomponent 7.4.4
     including a task subcomponent 9.2
     object initialization 3.2.1 [see also: initial value]
     of an aggregate 4.3
     with a private type component 7.4.2 

Compound delimiter 2.2
  [see also: arrow, assignment, box, delimiter, double dot, double star,
  exponentiation, greater than or equal, inequality, left label bracket,
  less than or equal, right label bracket]
     names of delimiters 2.2 

Compound statement 5.1
  [see also: statement]
     including the destination of a goto statement 5.9

Concatenation
  [see: catenation] 

Condition 5.3
  [see also: expression]
     determining an open alternative of a selective wait 9.7.1
     in an exit statement 5.7
     in an if statement 5.3 
     in a while iteration scheme 5.5 

Conditional compilation 10.6 

Conditional entry call 9.7.2; 9.7
     and renamed entries 8.5
     subject to an address clause 13.5.1 

Conforming 6.3.1
     discriminant parts 6.3.1; 3.8.1, 7.4.1
     formal parts 6.3.1
     formal parts in entry declarations and accept statements 9.5
     subprogram specifications 6.3.1; 6.3
     subprogram specifications in body stub and subunit 10.2
     type marks 6.3.1; 7.4.3 

Conjunction
  [see: logical operator] 

Constant 3.2.1; D
  [see also: deferred constant, loop parameter, object]
     access object 3.8
     formal parameter 6.2
     in a static expression 4.9
     renamed 8.5
     that is a slice 4.1.2 

Constant declaration 3.2.1
  [see also: deferred constant declaration]
     as a full declaration 7.4.3
     with an array type 3.6.1
     with a record type 3.7.2 

CONSTRAINED (predefined attribute)
     for an object of a type with discriminants 3.7.4; A
     for a private type 7.4.2, A

Constrained array definition 3.6
     in an object declaration 3.2, 3.2.1 

Constrained array type 3.6
  [see also: array type, constraint] 

Constrained subtype 3.3; 3.2.1, 3.6, 3.6.1, 3.7, 3.7.2, 6.4.1, 12.3.4
  [see also: constraint, subtype, type, unconstrained subtype]
     due to elaboration of a type definition 3.3.1
     due to the elaboration of a derived type definition 3.4
     object declarations 3.2.1
     of a subtype indication in an allocator 4.8 

Constraint (on an object of a type) 3.3, 3.3.2; D
  [see also: accuracy constraint, compatibility, constrained subtype,
  dependence on a discriminant, discriminant constraint, elaboration of...,
  fixed point constraint, floating point constraint, index constraint,
  range constraint, satisfy, subtype, unconstrained subtype]
     explicitly specified by use of a qualification 4.7
     in a subtype indication in an allocator 4.8
     not considered in overload resolution 8.7
     on a derived subtype 3.4
     on a formal parameter 6.2
     on a formal parameter of a generic formal subprogram 12.1.3
     on a generic actual parameter 12.3.1
     on a generic formal object 12.1.1
     on a generic formal parameter 12.1; 12.3.1
     on an object designated by an access value 3.8
     on a renamed object 8.5
     on a subcomponent subject to a component clause must be static 13.4
     on a subtype of a generic formal type 12.1.2
     on a type mark in a generic parameter declaration 12.3.1
     on a variable 3.2.1, 3.3, 3.6
     on the result of a generic formal function 12.1.3 

CONSTRAINT_ERROR (predefined exception) 11.1
  [see also: access_check, discriminant_check, index_check, length_check,
  range_check]
     raised by an accept statement 9.5
     raised by an actual parameter not in the subtype of the formal
        parameter 6.4.1
     raised by an allocator 4.8
     raised by an assignment 5.2; 3.5.4
     raised by an attribute 3.5.5
     raised by a component of an array aggregate 4.3.2
     raised by a component of a record aggregate 4.3.1
     raised by an entry call statement 9.5
     raised by a formal parameter not in the subtype of the actual
        parameter 6.4.1
     raised by an index value out of bounds 4.1.1, 4.1.2
     raised by a logical operation on arrays of different lengths 4.5.1
     raised by a name with a prefix evaluated to a null access value 4.1
     raised by a qualification 4.7 
     raised by a result of a conversion 4.6
     raised by a return statement 5.8
     raised by incompatible constraints 3.3.2
     raised by integer exponentiation with a negative exponent 4.5.6
     raised by matching failure in an array  assignment 5.2.1
     raised by naming of a variant not present in a record 4.1.3
     raised by the elaboration of a generic instantiation 12.3.1, 12.3.2, 
        12.3.4, 12.3.5 
     raised by the initialization of an object 3.2.1
     raised by the result of catenation 4.5.3
     
Context clause 10.1.1; D
  [see also: use clause, with clause]
     determining order of elaboration of compilation units 10.5
     in a compilation unit 10.1
     including a use clause 8.4
     inserted by the environment 10.4
     of a subunit 10.2 

Context of overload resolution 8.7
  [see also: overloading] 

Control form
  [see: short circuit control form] 

CONTROLLED (predefined pragma) 4.8; B 
                           
Conversion operation 4.6
  [see also: explicit conversion, implicit conversion, numeric type,
  subtype conversion, type conversion, unchecked conversion]
     applied to an undefined value 3.2.1
     as a basic operation 3.3.3; 3.3, 3.5.5, 3.5.8, 3.5.10, 3.6.2, 3.7.4,
        3.8.2, 7.4.2
     between array types 4.6
     between numeric types 3.3.3, 3.5.5, 4.6
     from universal_ fixed type 4.5.5
     in a static expression 4.9
     of a universal type expression 5.2
     of the bounds of a loop parameter 5.5
     to a derived type 3.4
     to a real type 4.5.7 

Convertible universal operand 4.6 

Copy parameter passing 6.2 

COUNT (predefined attribute) for an entry 9.9; A 

COUNT (predefined integer type) 14.2, 14.2.5, 14.3.10; 14.2.4, 14.3,
14.3.3, 14.3.4, 14.4

CREATE (input-output procedure)
     in an instance of direct_io 14.2.1; 14.2.5
     in an instance of sequential_io 14.2.1; 14.2.3
     in text_io 14.2.1, 14.3.1; 14.3.10
     raising an exception 14.4

Current column number 14.3; 14.3.1, 14.3.4, 14.3.5, 14.3.6

Current index of a direct access file 14.2, 14.2.1; 14.2.4

Current line number 14.3; 14.3.1, 14.3.4, 14.3.5 

Current mode of a file 14.1, 14.2.1; 14.2.2, 14.2.4, 14.3, 14.3.5, 14.4

Current page number 14.3; 14.3.1, 14.3.4, 14.3.5 

Current size of a direct access file 14.2 

CURRENT_INPUT (text_io function) 14.3.2; 14.3.10

CURRENT_OUTPUT (text_io function) 14.3.2; 14.3.10   

DATA_ERROR (input-output exception) 14.4; 14.2.2, 14.2.3, 14.2.4, 14.2.5,
14.3.5, 14.3.7, 14.3.8, 14.3.9, 14.3.10, 14.5

Date
  [see: day, month, time, year] 

DAY (predefined function) 9.6 

Dead code elimination 
  [see: conditional compilation]

Deallocation
  [see: access type, unchecked_deallocation] 

Decimal literal 2.4.1
     as a numeric literal 2.4 

Decimal number text_io 14.3.7 

Decimal point
  [see: fixed point, floating point, point character] 

Declaration 3.1; D
  [see also: basic declaration, block name declaration, body, component
  declaration, constant declaration, deferred constant declaration, denote,
  discriminant specification, entry declaration, enumeration literal
  specification, exception declaration, exception raised during..., generic
  declaration, generic formal part, generic instantiation, generic parameter
  declaration, generic specification, hiding, implicit declaration,
  incomplete type declaration, label declaration, loop name declaration,
  loop parameter specification, number declaration, object declaration,
  package declaration, package specification, parameter specification,
  private type declaration, renaming declaration, representation clause,
  scope of..., specification, subprogram declaration, subprogram
  specification, subtype declaration, task declaration, task specification,
  type declaration, visibility]
     as an overload resolution context 8.7
     determined by visibility from an identifier 8.3
     made directly visible by a use clause 8.4
     of an enumeration literal 3.5.1
     of a formal parameter 6.1
     of a loop parameter 5.5
     overloaded 6.6
     raising an exception 11.4.2; 11.4
     to which a representation clause applies 13.1 

Declarative item 3.9
  [see also: basic declarative item, later declarative item]
     in a code procedure body 13.8
     in a declarative part 3.9; 6.3.2
     in a package specification 6.3.2
     in a visible part 7.4
     which is a use clause 8.4 

Declarative part 3.9; D
  [see also: elaboration of...,]
     in a block statement 5.6
     in a package body 7.1; 7.3
     in a subprogram body 6.3
     in a task body 9.1; 9.3
     including a generic declaration 12.2
     including an inline pragma 6.3.2
     including an interface pragma 13.9
     including a representation clause 13.1
     including a suppress pragma 11.7
     including a task declaration 9.3
     with implicit declarations 5.1 

Declarative region 8.1; 8.2, 8.4
  [see also: scope of...]
     determining the visibility of a declaration 8.3
     formed by the predefined package standard 8.6
     in which a declaration is hidden 8.3
     including a full type definition 7.4.2
     including a subprogram declaration 6.3 

Declared immediately within
  [see: occur immediately within] 

Default determination of a representation for an entity 13.1

Default expression
  [see: default initial value, default initialization, 
     discriminant specification, formal parameter, generic
     formal object, initial value]
     cannot include a forcing occurrence 13.1
     for a component 3.3; 7.4.3, 7.4.4
     for a component of a derived type object 3.4
     for a discriminant 3.7.1; 3.2.1, 3.7.2, 12.3.2
     for a formal parameter 6.1, 6.4.2; 6.4, 6.7, 7.4.3
     for a formal parameter of a generic formal subprogram 12.1; 7.4.3
     for a formal parameter of a renamed subprogram or entry 8.5
     for a generic formal object 12.1, 12.1.1; 12.3
     for the discriminants of an allocated object 4.8
     in a component declaration 3.7
     in a discriminant specification 3.7.1
     including the name of a private type 7.4.1

Default file 14.3.2; 14.3 

Default generic formal subprogram 12.1; 12.1.3, 12.3.6

Default initial value (of a type) 3.3
  [see also: default expression, initial value]
     for an access type object 3.8; 3.2.1  [see also: null access value]
     for a record type object 3.7; 3.2.1 

Default initialization (for an object) 3.2.1, 3.3
  [see also: default expression, default initial value, initial value]

Default mode (of a file) 14.2.1; 14.2.3, 14.2.5, 14.3.10

Default_aft (fiels length)  
        of fixed_io or float_io 14.3.8; 14.3.10

Default_base   
     of integer_io 14.3.7; 14.3.10

Default-exp (field length)
     of fixed_io or float_io 14.3.8; 14.3.10

Default_fore (field length)
     of fixed_io or float_io 14.3.8; 14.3.10

Default_setting (letter case)
     of enumeration_io 14.3.9; 14.3.10

Default_width (field length)
     of enumeration_io 14.3.9; 14.3.10
     of integer_io 14.3.7; 14.3.10

Deferred constant 7.4.3
     of a limited type 7.4.4 

Deferred constant declaration 7.4; 7.4.3
  [see also: private part (of a package), visible part (of a package)]
     as a basic declaration 3.1
     cannot include a forcing occurrence 13.1

Definition
  [see: access type definition, array type definition, component subtype
  definition, constrained array definition, derived type definition,
  enumeration type definition, generic type definition, index subtype
  definition, integer type definition, real type definition, record type
  definition, type definition, unconstrained array definition]

Delay alternative (of a selective wait) 9.7.1 

Delay expression 9.6; 9.7.1
  [see also: duration]
     in a timed entry call 9.7.3 

Delay statement 9.6
  [see also: statement, task]
     as a simple statement 5.1
     in an abnormal task 9.10
     in a select alternative 9.7.1
     in a timed entry call 9.7.3 

DELETE (input-output procedure)
     in an instance of direct_io 14.2.1; 14.2.5
     in an instance of sequential_io 14.2.1, 14.2.3
     in text_io 14.2.1; 14.3.10

Delimiter 2.2
  [see also: ampersand, apostrophe, arrow, assignment, colon, compound
  delimiter, divide, dot, double dot, equal, exclamation mark,
  exponentiation, greater than, greather than or equal, inequality, label
  bracket, less than or equal, less than, minus, parenthesis, period,
  plus, point, semicolon, semicolon, star, vertical bar]

Delta (of a fixed point type) 3.5.9
  [see also: fixed point type]
     of universal_fixed 4.5.5 

DELTA (predefined attribute) 3.5.10; 4.1.4, A 

Denote an entity 3.1, 4.1; D
  [see also: declaration, entity, name] 

Dependence between compilation units 10.3; 10.5
  [see also: with clause]
     circularity implying illegality 10.5 

Dependence on a discriminant 3.7.1; 3.7
  [see also: component subtype definition, component, constraint,
  discriminant constraint, discriminant, index constraint, subcomponent,
  subtype definition, variant part]
     affecting renaming 8.5
     by a subcomponent which is an actual parameter 6.2
     effect on compatibility 3.7.2
     effect on matching of components 4.5.2 
     for an assignment 5.2

Dependent task 9.4
     delaying exception propagation 11.4.1
     of an abnormal task 9.10

Derivable subprogram
     prohibiting representation clauses 13.1 

Derived subprogram
     as an operation 3.3.3
     implicitly declared 3.3.3 

Derived type 3.4; D
  [see also: parent type]
     conversion to or from a parent type or related type 4.6
     of an access type [see: access type, collection]
     of an access type designating a task type determining task
        dependence 9.4
     of a boolean type 3.4, 3.5.3
     of a limited type 7.4.4
     of a private type 7.4.1
     subject to a representation clause 13.1, 13.6 

Derived type definition 3.4; 3.3.1
  [see also: elaboration of...] 

Designate 3.8, 9.1; D
  [see also: access type, allocator, object designated by..., task
  designated by..., task object designated by ...]

Designated subtype (of an access type) 3.8

Designated type (of an access type) 3.8

Designator (of a function) 6.1
  [see also: attribute designator, operator, overloading of ...]; 
     in a function declaration 4.5
     in a subprogram body 6.3
     in a subprogram specification 6.1; 6.3
     of a generic formal subprogram 12.3.6; 12.1, 12.1.3
     of a library unit 10.1
     overloaded 6.6 

DEVICE_ERROR (input-output exception) 14.4; 14.2.3, 14.2.5, 14.3.10, 14.5

Digit 2.1
  [see also: basic graphic character, extended digit, letter or digit]
     in a based literal 2.4.2
     in a decimal literal 2.4.1
     in an identifier 2.3 

Digits (of a floating point type) 3.5.7
  [see also: floating point type] 

DIGITS (predefined attribute) 3.5.8; 4.1.4, A 

Dimensionality of an array 3.6 

Direct access file 14.2; 14.1, 14.2.1 

Direct input-output 14.2.4; 14.2.1 

Direct visibility 8.3; D
  [see also: basic operation, character literal, operation, operator symbol,
  selected component, visibility]
     due to a use clause 8.4
     of a library unit due to a with clause 10.1.1
     within a subunit 10.2 

DIRECT_IO (predefined input-output generic package) 14.2, 14.2.4; 14, 14.1,
14.2.5,
     exceptions 14.4; 14.5
     specification 14.2.5 

Discrete range 3.6, 3.6.1
  [see also: range, static discrete range]
     as a choice 3.7.3
     as a choice in an aggregate 4.3
     for a loop parameter 5.5
     in a choice in a case statement 5.4
     in a generic formal array type declaration 12.1.2; 12.3.4
     in an index constraint 3.6  
     in a loop parameter specification 5.5
     in a slice 4.1.2
     of entry indices in an entry declaration 9.5 

Discrete type 3.5; D
  [see also: basic operation of..., enumeration type, index, integer type,
  iteration scheme, operation of..., scalar type]
     as a generic actual parameter 12.3.3
     as a generic formal type 12.1.2
     expression in a case statement 5.4
     of a discriminant 3.7.1
     of a loop parameter 5.5
     of index values of an array 3.6
     operation 3.5.5; 4.5.2 

Discriminant 3.3, 3.7.1; 3.7, D
  [see also: component clause, component, composite type, default
  expression, dependance on..., record type, selected component,
  subcomponent]
     in a record aggregate 4.3.1
     initialization in an allocator constrains the allocated object 4.8
     of a formal parameter 6.2
     of a generic actual type 12.3.2
     of a generic formal type 12.3 12.3.2
     of an implicitly initialized object 3.2.1
     of an object designated by an access value 3.7.2; 5.2
     of a private type 7.4.2; 3.3
     of a variant part must not be of a generic formal type 3.7.3
     simple name in a variant part 3.7.3
     subcomponent of an object 3.2.1
     with a default expression 3.7.1; 3.2.1

Discriminant association 3.7.2
     in a discriminant constraint 3.7.2
     named discriminant association 3.7.2
     named discriminant association for selective visibility 8.3
     positional discriminant association 3.7.2 

Discriminant constraint 3.7.2; 3.3.2, D
  [see also: dependence on a discriminant]
     ignored due to access_check suppression 11.7
     in an allocator 4.8
     on an access type 3.8
     violated 11.1 

Discriminant part 3.7.1; 3.7   
  [see also: elaboration of...]
     absent from a record type declaration 3.7
     as a portion of a declarative region 8.1
     conforming to another 3.8.1, 6.3.1, 7.4.1
     in a generic formal type declaration 3.7.1; 12.1
     in an incomplete type declaration 3.8.1
     in a private type declaration 7.4, 7.4.1
     in a type declaration 3.3, 3.3.1
     may not include a pragma 2.8
     of a full type declaration is not elaborated 3.3.1 

Discriminant specification 3.7.1
  [see also: default expression]
     as part of a basic declaration 3.1
     declaring a component 3.7
     having an extended scope 8.2
     in a discriminant part 3.7.1
     visibility 8.3 

Discriminant_check
  [see: constraint_error, suppress] 

Disjunction
  [see: logical operator] 

Divide
     character 2.1
     delimiter 2.2 

Division operation 4.5.5
     accuracy for a real type 4.5.7 

Division operator
  [see: multiplying operator] 

Division_check
  [see: numeric_error, suppress]

Dot
  [see: double dot]
     character 2.1 [see also: double dot, point character]
     delimiter 2.2
     delimiter of a selected component 8.3; 4.1.3

Double dot compound delimiter 2.2 

Double hyphen starting a comment 2.7 

Double star compound delimiter 2.2
  [see also: exponentiation compound delimiter] 

DURATION (predefined type) 9.6; C
  [see also: delay expression, fixed point type]
     of alternative delay statements 9.7.1    

Effect
  [see: elaboration has no other effect] 

ELABORATE (predefined pragma) 10.5; B 

Elaborated 3.9 

Elaboration 3.9; 3.1, 3.3, D, 10.1
  [see also: exception raised during..., order of elaboration]
     optimized 10.6 

Elaboration has no other effect 3.1

Elaboration of
     an access type definition 3.8
     an array type definition 3.6
     a body stub 10.2
     a component declaration 3.7
     a component subtype definition 3.7
     a constrained array definition 3.6
     a declaration 3.1
     a declarative item 3.9
     a declarative part 3.9
     a deferred constant declaration 7.4.3
     a derived type definition 3.4
     a discriminant constraint 3.7.2
     a discriminant part 3.7.1
     a discriminant specification 3.7.1
     an entry declaration 9.5
     an enumeration literal specification 3.5.1
     an enumeration type definition 3.5.1
     a fixed point type declaration 3.5.9
     a floating point type declaration 3.5.7
     a formal part 6.1
     a full type declaration 3.3.1
     a generic body 12.2
     a generic declaration 12.1
     a generic instantiation 12.3
     an incomplete type declaration 3.8.1
     an index constraint 3.6.1
     an integer type definition 3.5.4
     a library unit 10.5
     a loop parameter specification 5.5
     an object declaration 3.2.1
     a package body 7.3
     a package declaration 7.2
     a parameter specification 6.1
     a private type declaration 7.4.1
     a range constraint 3.5
     a real type definition 3.5.6
     a record type definition 3.7
     a renaming declaration 8.5
     a representation clause 13.1
     a subprogram body 6.3
     a subprogram declaration 6.1
     a subtype declaration 3.3.2
     a subtype indication 3.3.2
     a task body 9.1
     a task declaration9.1
     a task specification 9.1
     a type declaration 3.3.1, 3.8.1, 7.4.1
     a type definition 3.3.1; 
     an unconstrained array definition 3.6
     a use clause 8.4 

Elaboration_check
  [see: program_error exception, suppress] 

Element in a file 14, 14.1; 14.2
     in a direct access file 14.2.4
     in a sequential access file 14.2.2 

ELEMENT_TYPE (generic formal type of direct_io) 14.2.5; 14.1, 14.2.4

ELEMENT_TYPE (generic formal type of sequential_io) 14.2.3; 14.1, 14.2.2

Else part
     of a conditional entry call 9.7.2
     of an if statement 5.3
     of a selective wait 9.7.1; 11.1 

EMAX (predefined attribute) 3.5.8; A
  [see also: machine_emax]

Emin
  [see: machine_emin] 

Empty string literal 2.6 

End of line 2.2
     as a separator 2.2
     due to a format effector 2.2
     terminating a comment 2.7 

END_ERROR (input-output exception) 14.4; 14.2.2, 14.2.3, 14.2.4, 14.2.5,
14.3.4, 14.3.5, 14.3.6, 14.3.10, 14.5

END_OF_FILE (input-output function)  
     in an instance of direct_io 14.2.4; 14.2.5
     in an instance of sequential_io 14.2.2; 14.2.3
     in text_io 14.3.1, 14.3.10

END_OF_LINE (text_io function) 14.3.4; 14.3.10
     raising an exception 14.4

END_OF_PAGE (text_io function) 14.3.4; 14.3.10, 14.4

Entry (of a task) 9.5; 9, 9.2, D
  [see also: actual parameter, address attribute, attribute of...,
  formal parameter, interrupt entry, overloading of..., parameter and
  result type profile, parameter, subprogram]
     declared by instantiation of a generic formal parameter 12.3
     denoted by an indexed component 4.1.1
     denoted by a selected component 4.1.3
     name [see: name of an entry]
     name starting with a prefix 4.1
     of a derived task type 3.4
     of a task designated by an object of a task type 9.5
     renamed 8.5
     subject to an address clause 13.5, 13.5.1
     subject to a representation clause 13.1 

Entry call 9.5; 9, 9.7.1, 9.7.2, 9.7.3
  [see also: actual parameter, conditional entry call, subprogram call,
  timed entry call]
     to an abnormal task 9.5, 9.10, 11.5; 9.5
     to communicate values 9.11 

Entry call statement 9.5
  [see also: accept statement, actual parameter, statement, task declaration,
  task]
     as a simple statement 5.1
     in an abnormal task 9.10
     in a conditional entry call 9.7.2; 9.5
     in a timed entry call 9.7.3; 9.5 

Entry declaration 9.5
  [see also: elaboration of...]
     as an overloaded declaration 8.3
     as part of a basic declaration 3.1
     cannot include a forcing occurrence 13.1
     having an extended scope 8.2
     in a task specification 9.1
     including the name of a private type 7.4.1
     visibility 8.3 

Entry family 9.5 
     denoted by a selected component 4.1.3
     name starting with a prefix 4.1 

Entry index (in the name of an entry of a family) 9.5
     for an open accept alternative 9.7.1
     in a conditional entry call 9.7.2
     in a timed entry call 9.7.3 

Entry queue (of calls awaiting acceptance) 9.5
     count of calls in the queue 9.9
     due to queued interrupts 13.5.1
     of an abnormal task 9.10

Enumeration literal 3.5.1, 4.2
  [see also: overloading of..., predefined function]
     as an operation 3.3.3
     as an operator 3.5.5
     as result for image attribute 3.5.5
     as the parameter for value attribute 3.5.5
     implicitly declared 3.3.3
     in a static expression 4.9
     in pragma system_name 13.7
     of a derived type 3.4
     overloaded 8.3
     renamed as a function 8.5
     representation 13.3 

Enumeration literal specification 3.5.1
     as part of a basic declaration 3.1
     made directly visible by a use clause 8.4 

Enumeration representation clause 13.3
     as a representation clause 13.1 

Enumeration type 3.5.1; 3.3, 3.5, D
  [see also: discrete type, scalar type]
     as a character type 3.5.2
     as a generic formal type 12.1.2
     as a generic parameter 12.3.3
     boolean 3.5.3
     operation 3.5.5
     subject to an attribute 3.5.5 

Enumeration type definition 3.5.1; 3.3.1
  [see also: elaboration of...] 

ENUMERATION_IO (text_io inner generic package) 14.3.9; 14.3.10

Environment of a program 10.4
     environment task calling the main program 10.1 

EPSILON (predefined attribute) 3.5.8; A

Equal
     character 2.1
     delimiter 2.2 
                                            
Equality operator 4.5; 4.5.2  
  [see also: limited type, relational operator]
     explicitly declared 4.5.2, 6.7; 7.4.4
     for an access type 3.8.2
     for an array type 3.6.2
     for a generic formal type 12.1.2
     for a limited type 4.5.2, 7.4.4
     for a real type 4.5.7
     for a  record type 3.7.4

Erroneous execution 1.6
  [see also: program_error] 
     due to an access to a deallocated object 13.10.1
     due to an unchecked conversion violating properties of objects of the
        result type 13.10.2
     due to assignment to a shared variable 9.11
     due to changing of a discriminant value 5.2, 6.2
     due to independence on parameter-passing mechanism 6.2
     due to multiple address clauses for overlaid entities 13.5
     due to suppression of an exception check 11.7
     due to use of an undefined value 3.2.1

Error bounds of a predefined operation of a real type 3.5.9, 4.5.7; 3.5.6,
3.5.7

Error detected at
     compilation time 1.6
     run time 1.6 

Error situation 1.6, 11, 11.1; 11.6 

Error that may not be detected 1.6 

Evaluation (of an expression) 4.5; D
  [see also: compile time evaluation, expression]
     at compile time 4.9, 10.6
     of an actual parameter 6.4.1
     of an aggregate 4.3; 3.3.3
     of an allocator 4.8
     of an array aggregate 4.3.2
     of a condition 5.3, 5.5, 5.7, 9.7.1
     of a default expression 3.7.2
     of a default expression for a formal parameter 6.4.2; 6.1
     of a discrete range 3.5; 9.5
     of a discrete range used in an index constraint 3.6.1
     of an entry index 9.5
     of an expression in an assignment statement 5.2
     of an expression in a constraint 3.3.2
     of an expression in a generic actual parameter 12.3
     of an indexed component 4.1.1
     of an initial value [see: default expression]
     of a literal 4.2; 3.3.3
     of a logical operation 4.5.1
     of a name 4.1; 4.1.1, 4.1.2, 4.1.3, 4.1.4  
     of a name in an abort statement 9.10
     of a name in a renaming declaration 8.5
     of a name of a variable 5.2, 6.4.1, 12.3
     of a primary 4.4
     of a qualified expression 4.7; 4.8
     of a range 3.5
     of a record aggregate 4.3.1
     of a short circuit control form 4.5.1
     of a static expresion 4.9
     of a type conversion 4.6
     of a universal expression 4.10
     of the bounds of a loop parameter 5.5
     of the conditions of a selective wait 9.7.1

Evaluation order
  [see: order of evaluation] 

Exception 11; 1.6, D
  [see also: constraint_error, numeric_error, predefined .., program_error,
  raise statement, raising of .., storage_error, tasking_error, time_error]
     as an entity 3.1
     causing a loop to be exited 5.5
     causing a transfer of control 5.1
     due to an expression evaluated at compile time 10.6
     implicitly declared in a generic instantiation 11.1
     in input-output 14.4; 14.5
     renamed 8.5 
     suppress pragma 11.7

Exception choice 11.2 

Exception declaration 11.1; 11
     as a basic declaration 3.1 

Exception handler 11.2; D
     in an abnormal task 9.10
     in a block statement 5.6
     in a package body 7.1; 7.3
     in a subprogram body 6.3
     in a task body 9.1
     including a raise statement 11.3
     including the destination of a goto statement 5.9
     including the name of an exception 11.1
     not allowed in a code procedure body 13.8
     raising an exception 11.4.1
     selected to handle an exception 11.4.1; 11.6 

Exception handling 11.4; 11.4.1, 11.4.2, 11.5 

Exception propagation 11
     delayed by a dependent task 11.4.1
     from a declaration 11.4.2
     from a predefined operation 11.6
     from a statement 11.4.1
     to a communicating task 11.5 

Exception raised during execution or elaboration of 
     an accept statement 11.5
     an allocator of a task 9.3 
     a conditional entry 9.7.2
     a declaration 11.4.2; 11.4
     a declarative part that declares tasks 9.3
     a generic instantiation 12.3.1, 12.3.2, 12.3.4, 12.3.
     a selective wait 9.7.1
     a subprogram call 6.3; 6.2, 6.5
     a statement 11.4.1; 11.4
     a subprogram call 6.3; 6.2, 6.5
     a task 11.5
     task activation 9.3 
     a timed entry call 9.7.3

Exceptions and optimization 11.6 

Exclamation character 2.1
     replacing vertical bar 2.10

Exclusive disjunction
  [see: logical operator] 

Execution
  [see: sequence of statements, statement, task body, task]

Exit statement 5.7
  [see also: statement]
     as a simple statement 5.1
     causing a loop to be exited 5.5
     causing a transfer of control 5.1
     completing block statement execution 9.4 

Expanded name 4.1.3; D
     denoting a loop 5.5
     in a static expression 4.9
     of a parent unit 10.2 
     replacing a simple name 6.3.1

Explicit conversion 4.6
  [see also: conversion operation, implicit conversion, subtype conversion,
  type conversion]
     from universal_fixed type 4.5.5
     to a real type 4.5.7 

Explicit declaration 3.1; 4.1
  [see also: declaration] 

Explicit initialization
  [see: allocator, object declaration, qualified expression]

Exponent of a floating point number 3.5.7; 13.7.3 

Exponent part
     in output of real values 14.3.8
     of a based literal 2.4.1, 2.4.2
     of a decimal literal 2.4.1 

Exponentiating operator 4.5; 4.5.6
  [see also: highest precedence operator]
     in a factor 4.4
     overloaded 6.7 

Exponentiation compound delimiter 2.2
  [see also: double star compound delimiter] 

Exponentiation operation 4.5.6 

Expression 4.4; D
  [see also: compile time evaluation, default expression, delay expression,
  evaluation, qualified expression, simple expression, static expression,
  universal type expression]
     as an actual parameter 6.4, 6.4.1
     as a condition 5.3
     as a generic actual parameter 12.3; 12.3.1   
     as the argument of a pragma 2.8
     in an actual parameter of a conditional entry call 9.7.2
     in an actual parameter of an entry call statement 9.5
     in an actual parameter of a timed entry call 9.7.3
     in an allocator 4.8
     in an assignment statement 5.2
     in an attribute designator 4.1.4
     in a case statement 5.4
     in a choice in a case statement 5.4
     in a component association 4.3
     in a component declaration 3.7
     in a constraint 3.3.2
     in a conversion 4.6
     in a discriminant association 3.7.2
     in a discriminant specification 3.7.1
     in a generic formal part 12.1
     in an indexed component 4.1.1
     in a length clause 13.2
     in a name of a variable 5.2, 6.4.1, 12.3
     in a number declaration 3.2
     in an object declaration 3.2, 3.2.1
     in a parameter specification 6.1
     in a primary 4.4
     in a qualified expression 4.7
     in a representation clause 13.1
     in a return statement 5.8
     in a specification of a derived subprogram 3.4
     in a type conversion 8.7
     including the name of a private type 7.4.1
     specifying an entry in a family 4.1.1
     specifying the value of an index 4.1.1
     with a boolean result 4.5.1, 4.5.2, 4.5.6

Extended_digit in a based literal 2.4.2 

External file 14.1
  [see also: file]    

Factor 4.4
     in a term 4.4 

FALSE boolean enumeration literal 3.5.3; C 

Family of entries
  [see: entry family]

FIELD (predefined integer subtype) 14.3.5; 14.3.7, 14.3.10

File (object of a file type) 14.1
  [see also: external file] 

File management 14.2.1
     in text_io 14.3.1 

File terminator 14.3; 14.3.1, 14.3.4, 14.3.5, 14.3.6, 14.3.7, 14.3.8, 14.3.9

FILE_MODE (input-output type)
     in an instance of direct_io 14.1, 14.2.1; 14.2.5
     in an instance of sequential_io 14.1, 14.2.1; 14.2.3
     in text_io 14.1, 14.2.1; 14.3.10

FILE_TYPE (input-output type)
     in an instance of direct_io 14.1, 14.2.1; 14.2, 14.2.4, 14.2.5
     in an instance of sequential_io 14.1, 14.2.1; 14.2, 14.2.2, 14.2.3
     in text_io 14.1, 14.2.1; 14.2, 14.3.3, 14.3.4, 14.3.6, 14.3.7, 14.3.8,
        14.3.9, 14.3.10

FINE_DELTA
  [see: system.fine_delta] 

FIRST (predefined attribute) A
  [see also: bound]
     for an access value 3.8.2
     for an array type 3.6.2        
     for a scalar type 3.5

First named subtype 13.1
  [see also: anonymous base type, representation clause] 

FIRST_BIT (predefined attribute) 13.7.2; A
  [see also: record representation clause] 

Fixed accuracy definition 3.5.9

Fixed point constraint 3.5.9; 3.5.6
     on a derived subtype 3.4 

Fixed point predefined types 3.5.9 

Fixed point types 3.5.9; D
  [see also: basic operation of..., duration, numeric type, operation
  of..., real type, scalar type, small, system.fine_delta,
  system.max_mantissa]
     accuracy of an operation 4.5.7
     as a generic actual type 12.3.3
     as a generic formal type 12.1.2
     error bounds 4.5.7; 3.5.6
     operation 3.5.10; 4.5.3, 4.5.4, 4.5.5
     result of an operation out of range of the type 4.5.7
     
FIXED_IO (text_io inner generic package) 14.3.8; 14.3.10

FLOAT (predefined type) 3.5.7; C 

FLOAT_IO (text_io inner generic package) 14.3.8; 14.3.10

Floating accuracy definition 3.5.7
     
Floating point constraint 3.5.7; 3.5.6
     on a derived subtype 3.4 

Floating point predefined types
  [see: FLOAT, LONG_FLOAT, SHORT_FLOAT] 

Floating point types 3.5.7; D
  [see also: numeric type, real type, scalar type, system.max_digits]
     accuracy of an operation 4.5.7
     as a generic actual type 12.3.3
     as a generic formal type 12.1.2
     error bounds 4.5.7; 3.5.6
     operation 3.5.8; 4.5.3, 4.5.4, 4.5.5, 4.5.6
     result of an operation out of range of the type 4.5.7

Font design of graphical symbols 2.1 

For loop
  [see: loop statement] 

Forcing occurrence (of a name leading to default determination of
representation) 13.1

FORE (predefined attribute) for a fixed point type 3.5.10; A

Fore field of text_io input or output 14.3.8, 14.3.10; 14.3.5

FORM (input-output function)
     in an instance of direct_io 14.2.1; 14.2.5
     in an instance of sequential_io 14.2.1, 14.2.3
     in text_io 14.2.1; 14.3.10
     raising an exception 14.4

Form feed format effector 2.1 

Form string of a file 14.1; 14.2.1, 14.2.3, 14.2.5, 14.3.10

Formal object
  [see: generic formal object] 

Formal parameter 6.1; D; (of an entry) 9.5; 3.2, 3.2.1; (of a function) 6.5;
(of an operator) 6.7; (of a subprogram) 6.1, 6.2, 6.4; 3.2, 3.2.1,6.3
  [see: actual parameter, default expression, entry, generic formal
  parameter, mode, object, subprogram]
     as a constant 3.2.1
     as an object 3.2
     as a variable 3.2.1
     names and overload resolution 6.6
     names and overload resolution 6.6
     of a derived subprogram 3.4
     of a generic formal subprogram 12.1, 12.1.3
     of a main program 10.1
     of an operation 3.3.3
     of a renamed entry or subprogram 8.5
     which is of an array type 3.6.1
     which is of a limited type 7.4.4
     which is of a record type 3.7.2
     which is of a task type 9.2 

Formal part 6.1; 6.4
  [see also: generic formal part, parameter type profile]
     conforming to another 6.3.1
     in an accept statement 9.5
     in an entry declaration 9.5
     in a subprogram specification 6.1
     must not include a pragma 2.8

Formal subprogram
  [see: generic formal subprogram] 

Formal type
  [see: generic formal type] 

Format effector 2.1
  [see also: carriage return, form feed, horizontal tabulation, line feed,
  vertical tabulation]
     as a separator 2.2
     in an end of line 2.2 

Format of text_io input or output 14.3.5, 14.3.7, 14.3.8, 14.3.9

Formula
  [see: expression] 

Frame 11.2
     and optimization 11.6
     in which an exception is raised 11.4.1, 11.4.2 

Full declaration
     of a deferred constant 7.4.3 

Full type declaration 3.3.1
     discriminant part is not elaborated 3.3.1
     of an incomplete type 3.8.1
     of a limited private type 7.4.4
     of a private type 7.4.1; 7.4.2 

Function 6.1, 6.5; 6,12.3, D
  [see also: operator, parameter and result type profile, parameter,
  predefined function, result subtype, return statement, subprogram]
     as a main program 10.1
     renamed 8.5
     result [see: returned value]
     that is an attribute 4.1.4; 12.3.6 

Function body
  [see: subprogram body] 

Function call 6.4; 6
  [see also: actual parameter, subprogram call]
     as a prefix 4.1, 4.1.3
     as a primary 4.4
     in a static expression 4.9
     with a parameter of a derived type 3.4
     with a result of a derived type 3.4 

Function specification
  [see: subprogram specification] 

Garbage collection 4.8 

Generic actual object 12.3.1; 12.1.1
  [see also: generic actual parameter] 

Generic actual parameter 12.3; 12
  [see also: generic actual object, generic actual subprogram, generic
  actual type, generic association, generic formal parameter, generic
  instantiation, matching]
     cannot be a universal_fixed operation 4.5.5
     for a generic formal access type 12.3.5
     for a generic formal array type 12.3.4
     for a generic formal object 12.1.1
     for a generic formal private type 12.3.2
     for a generic formal scalar type 12.3.3
     for a generic formal subprogram 12.1.3; 12.3.6
     for a generic formal type 12.1.2
     is not static 4.9
     that is an array aggregate 4.3.2
     that is a loop parameter 5.5
     that is a task type 9.2

Generic actual part 12.3 

Generic actual subprogram 12.1.3, 12.3.6
  [see also: generic actual parameter] 

Generic actual type
  [see: generic actual parameter]
     for a generic formal access type 12.3.5
     for a generic formal array type 12.3.4
     for a generic formal scalar type 12.3.3
     for a generic formal type with discriminants 12.3.2
     for a generic private formal type 12.3.2
     that is a private type 7.4.1 

Generic association 12.3
  [see also: generic actual parameter, generic formal parameter]
     named generic association 12.3 
     named generic association for selective visibility 8.3
     positional generic association 12.3 

Generic body 12.2; 12.1, 12.1.2, 12.3.2
  [see also: body stub, elaboration of...]
     in a package body 7.1
     including an exception handler 11.2; 11
     including an exit statement 5.7
     including a goto statement 5.9
     including an implicit declaration 5.1
     must be in the same declarative part as the declaration 3.9, 7.1
     not yet elaborated at an instantiation 3.9

Generic declaration 12.1; 12, 12.1.2, 12.2
  [see also: elaboration of...]
     and body as a declarative region 8.1
     and proper body in the same compilation 10.3
     as a basic declaration 3.1
     as a later declarative item 3.9
     as a library unit 10.1
     in a package specification 7.1
     recompiled 10.3 

Generic formal object 12.1, 12.1.1; 3.2, 12.3, 12.3.1
  [see also: default expression, generic formal parameter]
     of an array type 3.6.1
     of a record type 3.7.2 

Generic formal parameter 12.1, 12.3; D, 12
  [see also: generic actual parameter, generic association, generic formal
  object, generic formal subprogram, generic formal type, matching, object]
     as a constant 3.2.1
     as a variable 3.2.1
     of a limited type 7.4.4
     of a task type 9.2 

Generic formal part 12.1; D, 12 

Generic formal subprogram 12.1, 12.1.3; 12.1.2, 12.3, 12.3.6
  [see also: generic formal parameter]
     formal function 12.1.3
     with the same name as another 12.3 

Generic formal type 12.1, 12.1.2; 12.3
  [see also: constraint on..., discriminant of..., generic formal parameter,
  name of..., subtype indication...]
     as index or component type of a generic formal array type 12.3.4
     discriminant must not be the discriminant of a variant 3.7.3
     formal access type 12.1.2, 12.3.5
     formal array type 12.1.2
     formal array type (constrained) 12.1.2
     formal discrete type 12.1.2
     formal enumeration type 12.1.2
     formal fixed point type 12.1.2
     formal floating point type 12.1.2
     formal integer type 12.1.2
     formal limited private type 12.3.2
     formal limited type 12.1.2
     formal part 12.1.2
     formal private type 12.1.2, 12.3.2
     formal private type with discriminants 12.3.2
     formal scalar type 12.1.2, 12.3.3 

Generic function
  [see: generic subprogram] 

Generic instance 12.3; D, 12, 12.1, 12.2
  [see also: generic instantiation, scope of...]
     inlined in place of each call 6.3.2
     of a generic package 12.3
     of a generic subprogram 12.3
     raising an exception 11.4.1 

Generic instantiation 12.3; D, 12.1, 12.1.3, 12.2
  [see also: declaration, elaboration of..., generic actual parameter]
     as a basic declaration 3.1
     as a later declarative item 3.9
     as a library unit 10.1
     before elaboration of the body 3.9, 11.1
     implicitly declaring an exception 11.1
     invoking an operation of a generic actual type 12.1.2
     of a predefined input-output package 14.1
     recompiled 10.3
     with a formal access type 12.3.5
     with a formal array type 12.3.4
     with a formal scalar type 12.3.3
     with a formal subprogram 12.3.6

Generic package 12.1; 12
     for input-output 14
     instantiation 12.3; 12, 12.1 [see also: generic instantiation]
     specification 12.1 [see also: generic specification]

Generic package body 12.2; 12.1
  [see also: package body] 

Generic parameter declaration 12.1; 12.1.1, 12.1.2, 12.1.3, 12.3
  [see also: generic formal parameter]
     as a declarative region 8.1
     having an extended scope 8.2
     visibility 8.3 

Generic procedure
  [see: generic subprogram] 

Generic specification 12.1; 12.3.2
  [see also: generic package specification, generic subprogram specification]

Generic subprogram 12.1; 12
     body 12.2; 12.1 [see also: subprogram body]
     instantiation 12.3; 12, 12.1 [see also: generic instantiation]
     interface pragma is not defined 13.9
     specification 12.1 [see also: generic specification]

Generic type definition 12.1; 12.1.2, 12.3.3, 12.3.4

Generic unit 12, 12.1; D, 12.2, 12.3
  [see also: generic declaration, program unit]
     including an exception declaration 11.1
     including a raise statement 11.3
     subject to a suppress pragma 11.7
     with a separately compiled body 10.2 

Generic unit body
  [see: generic body] 

Generic unit specification
  [see: generic specification] 

GET (text_io procedure) 14.3.5; 14.3, 14.3.2, 14.3.4, 14.3.10
     for character and string types 14.3.6
     for enumeration types 14.3.9
     for integer types 14.3.7
     for real types 14.3.8
     raising an exception 14.4 

GET_LINE (text_io procedure) 14.3.6; 14.3.10

Global declaration 8.1
     of a variable shared by tasks 9.11 

Goto statement 5.9
  [see also: statement]
     as a simple statement 5.1
     causing a loop to be exited 5.5
     causing a transfer of control 5.1
     completing block statement execution 9.4 

Graphic character 2.1
  [see also: basic graphic character, character, lower case letter, other
  special character]
     in a character literal 2.5
     in a string literal 2.6 

Graphical symbol 2.1
  [see also: ascii]
     not available 2.10

Greater than
     character 2.1
     delimiter 2.2
     operator [see: relational operator] 

Greater than or equal
     compound delimiter 2.2
     operator [see: relational operator] 

Handler
  [see: exception handler, exception handling] 

Hiding (of a declaration) 8.3
  [see also: visibility]
     and renaming 8.5
     and use clauses 8.4
     due to an implicit declaration 5.1
     of a generic unit 12.1
     of a library unit 10.1
     of a subprogram 6.6
     of or by a derived subprogram 3.4
     of the package standard 10.1
     within a subunit 10.2 

Highest precedence operator 4.5
  [see also: abs, arithmetic operator, exponentiating operator, not unary
  operator, overloading of an operator, predefined operator]
     as an operation of a discrete type 3.5.5
     as an operation of a fixed point type 3.5.10
     as an operation of a floating point type 3.5.8
     overloaded 6.7

Homograph declaration 8.3
  [see also: overloading]
     and use clauses 8.4

Horizontal tabulation
     as a separator 2.2
     character in a comment 2.7
     format effector 2.1
     in text_io input 14.3.5 

Hyphen character 2.1
  [see also: minus character]
     starting a comment 2.7    

Identifier 2.3; 2.2
  [see also: direct visibility, loop parameter, name, overloading of...,
  scope of..., simple name, visibility]
     and an adjacent separator 2.2
     as an attribute designator 4.1.4
     as a designator 6.1
     as a reserved word 2.9
     as a simple name 4.1
     can be written in the basic character set 2.10
     denoting an object 3.2.1
     denoting a value 3.2.2
     in a deferred constant declaration 7.4.3
     in an entry declaration 9.5
     in an exception declaration 11.1
     in a generic instantiation 12.3
     in an incomplete type declaration 3.8.1
     in a number declaration 3.2.2
     in an object declaration 3.2
     in a package specification 7.1
     in a private type declaration 7.4; 7.4.1
     in a renaming declaration 8.5
     in a subprogram specification 6.1
     in a task specification 9.1
     in a type declaration 3.3.1; 7.4.1
     in its own declaration 8.3
     in pragma system_name 13.7
     of an argument of a pragma 2.8
     of an enumeration value 3.5.1
     of a formal parameter of a generic formal subprogram 12.1.3
     of a generic formal object 12.1, 12.1.1
     of a generic formal subprogram 12.1; 12.1.3
     of a generic formal type 12.1; 12.1.2
     of a generic unit 12.1
     of a library unit 10.1
     of a pragma 2.8
     of a subprogram 6.1
     of a subtype 3.3.2
     of a subunit 10.2
     of homograph declarations 8.3
     overloaded 6.6
     versus simple name 3.1 

Identifier list 3.2              
     in a component declaration, 3.7
     in a deferred constant declaration 7.4
     in a discriminant specification 3.7.1
     in a generic parameter declaration for generic formal objects 12.1
     in a number declaration 3.2
     in an object declaration 3.2
     in a parameter specification 6.1 

Identity operation 4.5.4 

If statement 5.3
  [see also: statement]
     as a compound statement 5.1 

Illegal 1.6

IMAGE (predefined attribute) 3.5.5; A 

Immediate scope 8.2; 8.3 

Immediately within (a declarative region) 
  [see: occur immediately within]

Implementation defined
  [see: system dependent]

Implementation defined pragma F

Implementation dependent
  [see: system dependent] 

Implicit conversion 4.6
  [see also: conversion operation, explicit conversion, subtype conversion,
  type conversion]
     of an integer literal to an integer type 3.5.4
     of a real literal to a real type 3.5.6 
     of a universal expression 3.5.4, 3.5.6
     of a universal real expression 4.5.7
     
Implicit declaration 3.1; 4.1
  [see also: scope of...]
     by a type declaration 4.5
     hidden by an explicit declaration 8.3
     of a basic operation 3.1, 3.3.3
     of a block name, loop name, or label 5.1; 3.1
     of a derived subprogram 3.3.3, 3.4
     of an enumeration literal 3.3.3
     of an equality operator 6.7
     of an exception due to an instantiation 11.1
     of a library unit 8.6, 10.1
     of a predefined operator 4.5
     of universal_fixed operators 4.5.5 

Implicit initialization of an object
  [see: allocator, default initial value] 

Implicit representation clause
     for a derived type 3.4 

In membership test
  [see: membership test]

In mode
  [see: mode in] 

In out mode
  [see: mode in out] 

IN_FILE (input-output file_mode enumeration literal) 14.1

Inclusive disjunction
  [see: logical operator] 

Incompatibility (of constraints)
  [see: compatibility] 

Incomplete type 3.8.1
   corresponding full type declaration 3.3.1 

Incomplete type declaration 3.8.1; 3.3.1, 7.4.1
     as a portion of a declarative region 8.1 

Incorrect order dependence 1.6
  [see also: program error]
     assignment statement 5.2
     bounds of a range constraint 3.5
     component association of an array aggregate 4.3.2
     component association of a record aggregate 4.3.1
     component subtype indication 3.6
     default expression for a component 3.2.1
     default expression for a discriminant 3.2.1
     expression 4.5
     index constraint 3.6 
     library unit 10.5
     parameter association 6.4
     prefix and discrete range of a slice 4.1.2

Index 3.6; D
  [see also: array, discrete type, entry index] 

INDEX (input-output function)
     in an instance of direct_io 14.2.4; 14.2.5 

Index constraint 3.6, 3.6.1; D
  [see also: dependence on a discriminant]
     ignored due to index_check suppression 11.7
     in an allocator 4.8
     in a constrained array definition 3.6
     in a subtype indication 3.3.2
     on an access type 3.8
     violated 11.1 

Index of an element in a direct access file 14.2; 14.2.4

Index range 3.6
     matching 4.5.2 

Index subtype 3.6 

Index subtype definition 3.6  

Index type
     of a choice in an array aggregate 4.3.2
     of a generic formal array type 12.3.4 

Index_check
  [see: constraint_error, suppress] 

Indexed component 4.1.1; 3.6, D
     as a basic operation 3.3.3; 3.3, 3.6.2, 3.8.2
     as a name 4.1
     as the name of an entry 9.5
     of a value of a generic formal array type 12.1.2

Indication
  [see: subtype indication] 

Inequality compound delimiter 2.2 

Inequality operation 4.5; 4.5.2
  [see also: limited type, relational operator]
     cannot be explicitly declared 6.7
     for an access type 3.8.2
     for an array type 3.6.2
     for a generic formal type 12.1.2
     for a real type 4.5.7
     for a real type 4.5.7
     not available for a limited type 7.4.4 
                                   
Initial value (of an object) 3.2.1
  [see also: allocator, composite type, default expression, default initial
  value, default initialization]
     in an allocator 4.8; 3.8, 7.4.4
     of an array object 3.6.1
     of a constant 3.2.1
     of a constant in a static expression 4.9
     of a discriminant of a formal parameter 6.2
     of a discriminant of an object 3.7.2 
     of a limited private type object 7.4.4
     of an object declared in a package 7.1
     of an out mode formal parameter 6.2
     of a record object 3.7.2 

Initialization
  [see: assignment, default expression, default
        initialization, initial value] 

INLINE (predefined pragma) 6.3.2; B
     creating recompilation dependence 10.3 

INOUT_FILE (input-output file_mode enumeration literal) 14.1

Input-output 14
  [see also: direct_io, io_exceptions, low_level_io, sequential_io, text_io]
     at device level 14.6
     exceptions 14.4; 14.5
     with a direct access file 14.2.4
     with a sequential file 14.2.2
     with a text file 14.3 

Instance
  [see: generic instance] 

Instantiation
  [see: generic instantiation] 

INTEGER (predefined type) 3.5.4; C
     as base type of a loop parameter 5.5
     as default type for the bounds of a discrete range 3.6.1; 9.5

Integer literal 2.4
  [see also: based integer literal, universal_integer type]
     as a bound of a discrete range 9.5
     as a universal integer literal 3.5.4
     in based notation 2.4.2
     in decimal notation 2.4.1 

Integer part
     as a base of a based literal 2.4.2
     of a decimal literal 2.4.1 

Integer predefined type 3.5.4
  [see also: INTEGER, LONG_INTEGER, SHORT_INTEGER] 

Integer subtype
  [see: priority]
     due to an integer type definition 3.5.4 

Integer type 3.5.4; 3.3, 3.5, D
  [see also: discrete type, numeric type, predefined type, scalar type,
  system.max_int, system.min_int, universal_integer type]
     as a generic formal type 12.1.2
     as a generic parameter 12.3.3
     operation 3.5.5; 4.5.3, 4.5.4, 4.5.5, 4.5.6
     result of a conversion from a numeric type 4.6
     result of an operation out of range of the type 4.5

Integer type declaration
  [see: integer type definition]     

Integer type definition 3.5.4; 3.3.1
  [see also: elaboration of...] 

INTEGER_IO (text_io inner generic package) 14.3.6; 14.3.10

INTERFACE (predefined pragma) 13.9; B 

Interface to other languages 13.9

Interrupt 13.5 

Interrupt entry 13.5.1
  [see also: address attribute] 

Interrupt queue
  [see: entry queue] 

IO_EXCEPTIONS (predefined input-output package) 14.4; C, 14, 14.1, 14.2.3,
14.2.5, 14.3.10, C
     specification 14.5

IS_OPEN (input-output function)
     in an instance of direct_io 14.2.1; 14.2.5
     in an instance of sequential_io 14.2.1, 14.2.3
     in text_io 14.2.1; 14.3.10

ISO (international organization for standardization) 2.1 

ISO seven bit coded character set 2.1

Item
  [see: basic declarative item, later declarative item] 

Iteration scheme 5.5
  [see also: discrete type]    

Label 5.1
  [see also: address attribute, name, statement]
     declaration 5.1
     implicitly declared 3.1
     lead to by a goto statement 5.9 

Label bracket
     compound delimiter 2.2 

Labeled statement 5.1
     in a code statement 13.8 

LARGE (predefined attribute) 3.5.8, 3.5.10; A 

LAST (predefined attribute) A
  [see also: bound]
     for an access value 3.8.2
     for an array type 3.6.2        
     for a scalar type 3.5

LAST_BIT (predefined attribute) 13.7.2; A
  [see also: record representation clause] 

Later declarative item 3.9 

Layout recommended 
  [see: paragraphing recommended] 

LAYOUT_ERROR (input-output exception) 14.4; 14.3.4, 14.3.5, 14.3.7, 14.3.8,
14.3.9, 14.3.10, 14.5

Leading zeros in a numeric literal 2.4.1 

Left label bracket compound delimiter 2.2 

Left parenthesis
     character 2.1
     delimiter 2.2 

Legal 1.6 

LENGTH (predefined attribute) 3.6.2; A
     for an access value 3.8.2 

Length clause 13.2
     as a representation clause 13.1
     for an access type 4.8
     specifying small of a fixed point type 13.2; 3.5.9

Length of a string literal 2.6 

Length of the result
     of an array comparison 4.5.1
     of an array logical negation 4.5.6
     of a catenation 4.5.3 

Length_check
  [see: constraint_error, suppress] 

Less than
     character 2.1
     delimiter 2.2
     operator [see: relational operator] 

Less than or equal
     compound delimiter 2.2
     operator [see: relational operator] 

Letter 2.3
  [see also: lower case letter, upper case letter]
     e or E in a decimal literal 2.4.1
     in a based literal 2.4.2
     in an identifier 2.3 

Letter_or_digit 2.3 

Lexical element 2, 2.2; 2.4, 2.5, 2.6, D
     as a point in the program text 8.3
     in a conforming construct 6.3.1
     transferred by a text_io procedure 14.3, 14.3.5, 14.3.9

Lexicographic order 4.5.2 

Library package
  [see: library unit, package]
     having dependent tasks 9.4 

Library package body
  [see: library unit, package body]
     raising an exception 11.4.1, 11.4.2 

Library unit 10.1; 10.5
  [see also: compilation unit, predefined package, predefined subprogram,
  program unit, secondary unit, standard predefined package, subunit]
     compiled before the corresponding body 10.3
     followed by an inline pragma 6.3.2
     included in the predefined package standard 8.6
     may not be subject to an address clause 13.5
     named in a use clause 10.5  
     named in a with clause 10.1.1; 10.3, 10.5
     recompiled 10.3
     scope 8.2
     subject to an interface pragma 13.9
     that is a package 7.1
     visibility due to a with clause 8.3
     whose name is needed in a compilation unit 10.1.1
     with a body stub 10.2 

Limited private type 7.4.4
  [see also: private type]
     as a generic actual type 12.3.2
     as a generic formal type 12.1.2 

Limited type 7.4.4; 9.2, D, 12.3.1
  [see also: assignment, equality operator, inequality operator, predefined
  operator, task type]
     as a full type 7.4.1
     component of a record 3.7
     generic formal object 12.1.1
     in an object declaration 3.2.1
     limited record type 3.7.4
     operation 7.4.4; 4.5.2
     parameters for explicitly declared equality operators 6.7

Line 14.3, 14.3.4 

LINE (text_io function) 14.3.4; 14.3.10
     raising an exception 14.4 

Line feed format effector 2.1 

Line length 14.3 14.3.3; 14.3.1, 14.3.4, 14.3.5, 14.3.6

Line terminator 14.3; 14.3.4, 14.3.5, 14.3.6, 14.3.7, 14.3.8, 14.3.9

LINE_LENGTH (text_io function) 14.3.3, 14.3.4; 14.3.3, 14.3.10
     raising an exception 14.4

List
  [see: component list, identifier list] 

LIST (predefined pragma) B 

Listing of program text
  [see: list pragma, page pragma] 

Literal 4.2; D
  [see also: based literal, character literal, decimal literal,
  enumeration literal, integer literal, null literal, numeric literal,
  overloading of..., real literal, string literal]
     as a basic operation 3.3.3
     of a derived type 3.4
     of universal_integer type 3.5.4
     of universal_real type 3.5.4, 3.5.6
     specification [see: enumeration literal specification]

Local declaration 8.1
     in a generic unit 12.3 

Logical negation operation 4.5.6 

Logical operation 4.5.1 

Logical operator 4.5; 4.4, 4.5.1, C
  [see also: overloading of an operator, predefined operator]
     as an operation of boolean type 3.5.5
     for an array type 3.6.2
     in an expression 4.4
     overloaded 6.7 

Logical processor 9 

LONG_FLOAT (predefined type) 3.5.7; C 

LONG_INTEGER (predefined type) 3.5.4; C
                      
Loop name 5.5
     declaration 5.1
     implicitly declared 3.1
     in an exit statement 5.7 

Loop parameter 5.5
  [see also: constant, object]
     as an object 3.2 

Loop parameter specification 5.5
  [see also: elaboration of...]
     as an overload resolution context 8.7
     is a declaration 3.1 

Loop statement 5.5
  [see also: statement]
     as a compound statement 5.1
     as a declarative region 8.1
     entity denoted by an expanded name 4.1.3
     including an exit statement 5.7 

LOW_LEVEL_IO (predefined input-output package) 14.6; C, 14

Lower bound
  [see: bound, first attribute] 

Lower case letter 2.1
  [see also: graphic character]
     a to f in a based literal 2.4.2
     e in a decimal literal 2.4.1
     in an identifier 2.3    

Machine code insertion 13.8

Machine dependent attribute 13.7.3 

Machine representation
  [see: representation] 

MACHINE_CODE (predefined package) 13.8; C

MACHINE_EMAX (predefined attribute) 13.7.3; 3.5.8, A 

MACHINE_EMIN (predefined attribute) 13.7.3; 3.5.8, A 

MACHINE_MANTISSA (predefined attribute) 13.7.3; 3.5.8, A

MACHINE_OVERFLOWS (predefined attribute) 13.7.3; 3.5.8, 3.5.10, A

MACHINE_RADIX (predefined attribute) 13.7.3; 3.5.8, A 

MACHINE_ROUNDS (predefined attribute) 13.7.3; 3.5.8, 3.5.10, A

Main program 10.1  
     execution requiring elaboration of library units 10.5
     included in the predefined package standard 8.6
     including a priority pragma 9.8
     raising an exception 11.4.1, 11.4.2
     termination 9.4 

MANTISSA (predefined attribute) 3.5.8, 3.5.10; A 

Mantissa
     of a fixed point number 3.5.9
     of a floating point number 3.5.7; 13.7.3

Mark
  [see: type_mark] 

Master (task) 9.4

Matching components
     of arrays 4.5.2; 4.5.1, 5.2.1
     of records 4.5.2 

Matching generic formal
     and actual parameters 12.3
     access type 12.3.5
     array type 12.3.4
     default subprogram 12.3.6; 12.1.3
     object 12.3.1; 12.1.1
     private type 12.3.2
     scalar type 12.3.3
     subprogram 12.3.6; 12.1.3
     type 12.3.2, 12.3.3, 12.3.4, 12.3.5; 12.1.2 

Mathematically correct result of a numeric operation 4.5; 4.5.7

MAX_DIGITS
  [see: system.max_digits] 

MAX_INT
  [see: system.max_int] 

MAX_MANTISSA
  [see: system.max_mantissa] 

Maximum line length 14.3 

Maximum page length 14.3 
                      
Membership test 4.4, 4.5.2
     cannot be overloaded 6.7 

Membership test operation 4.5
  [see also: overloading of...]
     as a basic operation 3.3.3; 3.3, 3.5.5, 3.5.8, 3.5.10, 3.6.2, 3.7.4,
        3.8.2, 7.4.2
     for a real type 4.5.7 

MEMORY_SIZE (predefined named number)
  [see: system.memory_size] 

MEMORY_SIZE (predefined pragma) 13.7; B 

MIN_INT
  [see: system.min_int] 

Minumization of storage
  [see: pack predefined pragma]

Minus
     character [see: hyphen character]
     character in an exponent of a numeric literal 2.4.1
     delimiter 2.2
     operator [see: binary adding operator, unary adding operator]
     unary operation 4.5.4 

Mod operator
  [see: multiplying operator] 

MODE (input-output function)
     in an instance of direct_io 14.2.1; 14.2.5
     in an instance of sequential_io 14.2.1; 14.2.3
     in text_io 14.2.1; 14.3.3, 14.3.4, 14.3.10

Mode (of a file) 14.1; 14.2.1
     of a direct access file 14.2; 14.2.5
     of a sequential access file 14.2; 14.2.3
     of a text_io file 14.3.1; 14.3.4 

Mode (of a parameter) 6.2; 6.1, D
  [see also: formal parameter, generic formal parameter]
     of a formal parameter of a derived subprogram 3.4
     of a formal parameter of a renamed entry or subprogram 8.5
     of a generic form object 12.1.1

Mode in out for a formal parameter 6.1, 6.2; 3.2.1
     of a function 6.5
     of an interrupt entry 13.5.1

Mode in for a generic formal object 12.1.1; 3.2.1, 12.3, 12.3.1

Mode in for a formal parameter 6.1, 6.2; 3.2.1
     of a function is not allowed 6.5
     of an interrupt entry is not allowed 13.5.1 

Mode in out for a generic formal object 12.1.1; 3.2.1, 12.3, 12.3.1

Mode out for a formal parameter 6.1, 6.2
     of a function is not allowed 6.5
     of an interrupt entry is not allowed 13.5.1 

MODE_ERROR (input-output exception) 14.4; 14.2.2, 14.2.3, 14.2.4, 14.2.5,
14.3.1, 14.3.2, 14.3.3, 14.3.4, 14.3.5, 14.3.10, 14.5

Model interval of a subtype 4.5.7

Model number (of a real type) 3.5.6; D
  [see also: real type, safe number]
     accuracy of a real operation 4.5.7
     of a fixed point type 3.5.9; 3.5.10
     of a floating point type 3.5.7; 3.5.8

Modulus operation 4.5.5 

MONTH (predefined function) 9.6 

Multidimensional array 3.6 

Multiple
     component definition 3.7; 3.2
     deferred constant declaration 7.4; 3.2
     discriminant specification 3.7.1; 3.2
     generic parameter declaration 12.1; 3.2
     number declaration 3.2.2; 3.2
     object declaration 6.1; 3.2
     parameter specification 6.1; 3.2

Multiplication operation 4.5.5
     accuracy for a real type 4.5.7 

Multiplying operator 4.5; 4.5.5, C
  [see also: arithmetic operator, overloading of an operator]
     in a term 4.4
     overloaded 6.7 

Must (legality requirement) 1.6 

Mutually recursive types 3.8.1; 3.3.1    
                                                          
NAME (input-output function)
     in an instance of direct_io 14.2.1
     in an instance of sequential_io 14.2.1
     in text_io 14.2.1 

NAME (predefined type)
  [see: system.name] 

Name (of an entity) 4.1; 2.3, 3.1, D
  [see also: attribute, block name, denote, designator, evaluation of...,
  forcing occurrence, function call, identifier, indexed component, label,
  loop name, loop parameter, operator symbol, renaming declaration,
  selected component, simple name, slice, type_mark, visibility]
     as a prefix 4.1
     as a primary 4.4
     as the argument of a pragma 2.8
     as the expression in a case statement 5.4
     conflicts 8.5
     declared by renaming is not allowed as prefix of certain expanded
        names 4.1.3
     declared in a generic unit 12.3
     denoting an entity 4.1
     denoting an object designated by an access value 4.1
     starting with a prefix 4.1; 4.1.1, 4.1.2, 4.1.3, 4.1.4 

Name string (of a file) 14.1; 14.2.1, 14.2.3, 14.2.5, 14.3, 14.3.10, 14.4

NAME_ERROR (input-output exception) 14.4; 14.2.1, 14.2.3, 14.2.5, 14.3.10,
14.5

Named association 6.4.2, D
  [see also: component association, discriminant association, generic
  association, parameter association]

Named block statement
  [see: block name] 

Named loop statement
  [see: loop name] 

Named number 3.2; 3.2.2
     as an entity 3.1
     as a primary 4.4
     in a static expression 4.9 

NATURAL (predefined integer subtype) C

Negation
  [see: logical negation operation] 

Negation operation (numeric) 4.5.4 

Negative exponent
     in a numeric literal 2.4.1
     to an exponentiation operator 4.5.6 

NEW_LINE (text_io procedure) 14.3.4; 14.3.5, 14.3.6, 14.3.10
     raising an exception 14.4

NEW_PAGE (text_io procedure) 14.3.4; 14.3.10
     raising an exception 14.4 

No other effect 
  [see: elaboration has no other effect]

Not equal
     compound delimiter [see: inequality compound delimiter]
     operator [see: relational operator]

Not in membership test
  [see: membership test] 

Not unary operator
  [see: highest precedence operator]
     as an operation of an array type 3.6.2
     as an operation of boolean type 3.5.5
     in a factor 4.4 

Not yet elaborated 3.9 

Null access value 3.8; 3.4, 4.2, 6.2, 11.1
  [see also: default initial value of an access type object]
     causing constraint_error 4.1
     not causing constraint_error 11.7 

Null array 3.6.1; 3.6
     aggregate 4.3.2
     and relational operation 4.5.2
     as an operand of a catenation 4.5.3 

Null component list 3.7 

Null literal 3.8, 4.2
  [see also: overloading of...]
     as a basic operation 3.3.3; 3.8.2
     as a primary 4.4
     must not be the argument of a conversion 4.6 

Null range 3.5
     as a choice of a variant part 3.7.3
     for a loop parameter 5.5 

Null record 3.7
     and relational operation 4.5.2 

Null slice 4.1.2
  [see also: array type] 

Null statement 5.1
  [see also: statement]
     as a simple statement 5.1 

Null string literal 2.6 

Number
  [see: based number, decimal number] 

Number declaration 3.2, 3.2.2
     as a basic declaration 3.1 

NUMBER_BASE (predefined integer subtype) 14.3.7; 14.3.10

Numeric literal 2.4, 4.2; 2.2, 2.4.1, 2.4.2
  [see also: universal type expression]
     and an adjacent separator 2.2
     as a basic operation 3.3.3
     as a primary 4.4
     as the parameter of value attribute 3.5.5
     as the result of image attribute 3.5.5
     assigned 5.2
     can be written in the basic character set 2.10
     in a conforming construct 6.3.1
     in a static expression 4.9
     in pragma memory_size 13.7
     in pragma storage_unit 13.7  

Numeric operation of a universal type 4.10

Numeric type 3.5
  [see also: conversion, fixed point type, floating point type, integer
  type, real type, scalar type]
     operation 4.5, 4.5.2, 4.5.3, 4.5.4, 4.5.5, 4.5.6 

Numeric type expression
     in a length clause 13.2 

Numeric value of a number declaration 3.2 

NUMERIC_ERROR (predefined exception) 11.1
  [see also: suppress pragma]
     not raised due to lost overflow conditions 13.7.3
     not raised due to optimization 11.6
     raised by a numeric operator 4.5
     raised by a predefined integer operation 3.5.4
     raised by a real result out of range of the safe numbers 4.5.7
     raised by a universal expression 4.10
     raised by integer division remainder or modulus 4.5.5
     raised due to a conversion out of range 3.5.4, 3.5.6

Object 3.2; 3.2.1, D
  [see also: address attribute, allocator, collection, component, constant,
  formal parameter, generic formal parameter, initial value, loop parameter,
  size attribute, storage bits allocated, subcomponent, variable]
     as an actual parameter 6.2
     as a generic formal parameter 12.1.1
     created by an allocator 4.8
     created by elaboration of an object declaration 3.2.1
     of an access type [see: access type object]
     of a file type [see: file]
     of a task type [see: task object]
     renamed 8.5
     subject to an address clause 13.5
     subject to a representation clause 13.1
     subject to a suppress pragma 11.7 

Object declaration 3.2, 3.2.1
  [see also: elaboration of..., generic parameter declaration]
     as a basic declaration 3.1
     as a full declaration 7.4.3
     implied by a task declaration 9.1
     in a package specification 7.1
     of an array object 3.6.1
     of a record object 3.7.2
     with a limited type 7.4.4
     with a task type 9.2; 9.3 

Object designated
     by an access value 3.2, 3.8, 4.8; 4.1.3, 5.2, 9.2, 11.1
     [see also: task object designated...]
     by an access value denoted by a name 4.1
     by an access-to-array type 3.6.1
     by an access-to-record type 3.7.2
     by a generic formal access type value 12.3.5 

Object module
     for a subprogram written in another language 13.9 

Obsolete compilation unit (due to recompilation) 10.3 

Occur immediately within (a declarative region)
        8.1; 8.3, 8.4, 10.2

Omitted parameter association for a subprogram
        call 6.4.2 

OPEN (input-output procedure)
     in an instance of direct_io 14.2.1; 14.1, 14.2.5
     in an instance of sequential_io 14.2.1; 14.1, 14.2.3
     in text_io 14.2.1; 14.1, 14.3.1, 14.3.10
     raising an exception 14.4

Open alternative 9.7.1
  [see also: alternative]
     accepting a conditional entry call 9.7.2
     accepting a timed entry call 9.7.3 

Open file 14.1 

Operation 3.3, 3.3.3; D
  [see also: basic operation, direct visibility, operator, predefined
  operation, visibility by selection, visibility]
     classification 3.3.3
     of an access type 3.8.2
     of an array type 3.6.2
     of a discrete type 3.5.5
     of a fixed point type 3.5.10
     of a floating point type 3.5.8
     of a generic actual type 12.1.2
     of a generic formal type 12.1.2; 12.3
     of a limited type 7.4.4
     of a private type 7.4.2; 7.4.1
     of a record type 3.7.4
     of a subtype 3.3
     of a subtype of a discrete type 3.5.5
     of a type 3.3
     of a universal type 4.10
     propagating an exception 11.6
     subject to a suppress pragma 11.7 

Operator 4.5; 4.4, C, D
  [see also: binary adding operator, designator, exponentiating operator,
  function, highest precedence operator, logical operator, multiplying
  operator, overloading of..., predefined operator, relational operator,
  unary adding operator]
     as an operation 3.3.3 [see also: operation]
     implicitly declared 3.3.3
     in an expression 4.4
     in a static expression 4.9
     of a derived type 3.4
     of a generic actual type 12.1.2
     overloaded 6.7; 6.6
     renamed 8.5 

Operator declaration 6.1; 4.5, 6.7 

Operator symbol 6.1
  [see also: direct visibility, overloading of..., scope of..., visibility
  by selection, visibility]
     as a designator 6.1
     as a designator in a function declaration 4.5
     as a name 4.1
     before arrow compound delimiter 8.3
     declared 3.1
     declared in a generic unit 12.3
     in a renaming declaration 8.5
     in a selector 4.1.3
     in a static expression 4.9
     not allowed as the designator of a library unit 10.1
     of a generic formal function 12.1.3, 12.3
     of homograph declarations 8.3
     overloaded 6.7; 6.6 

Optimization 10.6
  [see also: optimize pragma]
     and exceptions 11.6 

OPTIMIZE (predefined pragma) B 

Or else control form
  [see: short circuit control form] 

Or operator
  [see: logical operator]

Order
  [see: Lexicographic order] 

Order not defined by the language
  [see: incorrect order dependence] 

Order of application of operators in an expression 4.5

Order of compilation (of compilation units) 10.1, 10.3; 10.1.1, 10.4;
        creating recompilation dependence 10.3

Order of copying back of out and in out formal parameters 6.4

Order of elaboration 3.9
  [see also: incorrect order dependence]; (of compilation units) 10.5;
  10.1.1

Order of evaluation 1.6
  [see also: incorrect order dependence]
     and exceptions 11.6
     of conditions in an if statement 5.3
     of default expressions for components 3.2.1
     of expressions and the name in an assignment statement 5.2
     of operands in an expression 4.5
     of parameter associations in a subroutine call 6.4
     of the bounds of a range 3.5
     of the conditions in a selective wait 9.7.1 

Ordering operator 4.5; 4.5.2 

Ordering relation 4.5.2
  [see also: relational operator]
     for a real type 4.5.7
     of an enumeration type preserved by a representation clause 13.3
     of a scalar type 3.5 

Other effect
  [see: elaboration has no other effect] 

Other special character 2.1
  [see also: graphic character] 

Others 3.7.3
     as a choice in an array aggregate 4.3.2
     as a choice in a case statement alternative 5.4
     as a choice in a component association 4.3
     as a choice in a record aggregate 4.3.1
     as a choice in a variant part 3.7.3
     as an exception choice 11.2 

Out mode
  [see: mode out] 

OUT_FILE (input-output file_mode enumeration literal) 14.1

Overflow of real operations 4.5.7; 13.7.3 

Overflow_check
  [see: numeric_error, suppress] 

Overlapping scopes
  [see: hiding, overloading] 

Overlapping slices in array assignment 5.2.1

Overlaying of objects or program units 13.5 

Overloading 8.3; D
  [see also: designator, homograph declaration, identifier, operator symbol,
  scope, simple name, subprogram, visibility];
     and visibility 8.3
     in an assignment statement 5.2
     in an expression 4.4
     resolution 6.6
     resolution context 8.7
     resolved by explicit qualification 4.7
   
Overloading of
     an aggregate 3.4
     an allocator 4.8
     a declaration 8.3
     a designator 6.6; 6.7
     an entry 9.5
     an enumeration literal 3.5.1; 3.4
     a generic formal subprogram 12.3
     a generic unit 12.1
     an identifier 6.6
     a library unit by a locally declared subprogram 10.1
     a library unit by means of renaming 10.1
     a literal 4.2
     a membership test 4.5.2
     an operator 4.5, 6.7; 4.4, 6.1
     an operator symbol 6.6; 6.7
     a subprogram 6.6; 6.7
     a subprogram subject to an interface pragma 13.9
     the expression in a case statement 5.4    

PACK (predefined pragma) 13.1; B 

Package 7, 7.1; D
  [see also: deferred constant declaration, library unit, predefined
  package, private part, program unit, visible part]
     as a generic instance 12.3; 12
     including a raise statement 11.3
     named in a use clause 8.4
     renamed 8.5                                 
     subject to an address clause 13.5
     subject to representation clause 13.1
     with a separately compiled body 10.2 

Package body 7.1, 7.3; D
  [see also: body stub]
     as a generic body 12.2
     as a proper body 3.9
     as a secondary unit 10.1
     as a secondary unit compiled after the corresponding library unit 10.3
     in another package body 7.1
     including an exception handler 11.2; 11
     including an exit statement 5.7
     including a goto statement 5.9
     including an implicit declaration 5.1
     must be in the same declarative part as the declaration 3.9
     raising an exception 11.4.1, 11.4.2
     recompiled 10.3
     subject to a suppress pragma 11.7 

Package declaration 7.1, 7.2; D
     and body as a declarative region 8.1 
     as a basic declaration 3.1
     as a later declarative item 3.9
     as a library unit 10.1
     determining the visibility of another declaration 8.3
     elaboration raising an exception 11.4.2
     in a package specification 7.1
     recompiled 10.3 

Package identifier 7.1 

Package specification 7.1, 7.2
     in a generic declaration 12.1
     including an inline pragma 6.3.2
     including an interface pragma 13.9
     including a representation clause 13.1
     including a suppress pragma 11.7 

Page 14.3.4; 14.3 

PAGE (predefined pragma) B 

PAGE  (text_io function) 14.3.3; 14.3.10
     raising an exception 14.4 

Page length 14.3, 14.3.3; 14.3.1, 14.3.4, 14.4 

Page terminator 14.3; 14.3.3, 14.3.4, 14.3.5 

PAGE_LENGTH (text_io function) 14.3.3, 14.3.10
     raising an exception 14.4

Paragraphing recommended for the layout of programs 1.5

Parallel execution
  [see: task] 

Parameter D
  [see also: actual parameter, default expression, entry, formal parameter,
  formal part, function, generic actual parameter, generic formal parameter,
  loop parameter, mode, procedure, subprogram]
     of a main program 10.1 

Parameter and result type profile 6.6

Parameter association 6.4, 6.4.1
     for a derived subprogram 3.4
     named parameter association 6.4
     named parameter association for selective visibility 8.3
     omitted for a subprogram call 6.4.2
     positional parameter association 6.4 

Parameter declaration
  [see: generic parameter declaration, parameter specification]

Parameter part
  [see: actual parameter part] 

Parameter specification 6.1
  [see also: loop parameter specification]   
     as part of a basic declaration 3.1
     having an extended scope 8.2
     in a formal part 6.1
     visibility 8.3 

Parameter type profile 6.6 

Parent subprogram (of a derived subprogram) 3.4 

Parent subtype (of a derived subtype) 3.4 

Parent type (of a derived type) 3.4; D
  [see also: derived type]
     declared in a visible part 3.4
     of a generic actual type 12.1.2
     of a numeric type is predefined and anonymous 3.5.4. 3.5.7, 3.5.9

Parent unit (of a body stub) 10.2
     compiled before its subunits 10.3 

Parenthesis
     character 2.1
     delimiter 2.2 

Parenthesized expression
     as a primary 4.4; 4.5
     in a static expression 4.9

Part
  [see: actual parameter part, declarative part, discriminant part, formal
  part, generic actual part, generic formal part, variant part]

Partial ordering of compilation 10.3 

Percent character 2.1
  [see also: string literal]
     replacing quotation character 2.10

Period character 2.1
  [see also: dot character, point character] 

Physical processor 9; 9.8

Plus
     character 2.1
     delimiter 2.2
     operator [see: binary adding operator, unary adding operator]
     unary operation 4.5.4 

Point character 2.1
  [see also: dot]
     in a based literal 2.4.2
     in a decimal literal 2.4.1
     in a numeric literal 2.4 

Point delimiter 2.2 

Pointer
  [see: access type] 

Portability 1.1
  of programs using real types 13.7.3 

POS (predefined attribute) 3.5.5; A, 13.3 

POSITION (predefined attribute) 13.7.2; A
  [see also: record representation clause] 

Position number
     as parameter to val attribute 3.5.5
     of an enumeration literal 3.5.1
     of an integer value 3.5.4
     of a value of a discrete type 3.5  
     returned by pos attribute 3.5.5 

Position of a component within a record
  [see: record representation clause] 

Position of an element in a direct access file 14.2 

Positional association  6.4, 6.4.2, D
  [see also: component association, discriminant association, generic
  association, parameter association]

POSITIVE (predefined integer subtype) 3.6.3; C, 14.3.7, 14.3.8, 14.3.9,
14.3.10, C
     as the index type of the string type 3.6.3

POSITIVE_COUNT (predefined integer subtype) 14.2.5, 14.3.10; 14.2.4, 14.3,
14.3.4

Potentially visible declaration 8.4 

Pound sterling character 2.1 

Power operator
  [see: exponentiating operator] 

Pragma 2.8; 2, D
  [see also: predefined pragma]
     applicable to the whole of a compilation 10.1
     argument that is an overloaded subprogram name 6.3.2, 8.7, 13.9
     for the specification of a subprogram body in another language 13.9
     for the specification of program overlays 13.5
     in a code procedure body 13.8
     recommending the representation of an entity 13.1
     specifying implementation conventions for code statements 13.8

Precedence 4.5 

Precision (numeric)
  [see delts, digits]

PRED (predefined attribute) 3.5.5; A, 13.3 

Predecessor
  [see: pred attribute] 

Predefined attribute
  [see: address, base, callable, constrained, count, first, first_bit, image,
  last, last_bit, pos, pred, range, size, small, storage_size, succ,
  terminated, val, value, width]

Predefined constant 8.6; C
  [see also: system.system_name]
     for CHARACTER values [see: ascii]

Predefined exception 8.6, 11.1; C, 11.4.1
  [see also: constraint_error, io_exceptions, numeric_error, program_error,
  tasking_error, time_error]

Predefined function 8.6; C
  [see also: attribute, character literal, enumeration literal, predefined
  generic library function]

Predefined generic library function 8.6; C
  [see also: unchecked_conversion] 

Predefined generic library package 8.6; C
  [see also: direct_io, input-output package, sequential_io]

Predefined generic library procedure 8.6; C
  [see also: unchecked_deallocation] 

Predefined generic library subprogram 8.6; C 

Predefined identifier 8.6; C 

Predefined library package 8.6; C
  [see also: predefined generic library package, predefined package, ascii,
  calendar, input-output package, io_exception, low_level_io, machine_code,
  system, text_io]

Predefined library subprogram
  [see: predefined generic library subprogram] 

Predefined named number
  [see: system.fine_delta, system.max_digits, system.max_int,
  system.max_mantissa, system.memory_size, system.min_int,
  system.storage_unit, system.tick]

Predefined operation 3.3, 3.3.3; 8.6
  [see also: operation, predefined operator]
     accuracy for a real type 4.5.7
     of a discrete type 3.5.5
     of a fixed point type 3.5.10
     of a universal type 4.10
     propagating an exception 11.6

Predefined operator 4.5, 8.6; C
  [see also: abs, arithmetic operator, binary adding operator, catenation,
  equality, exponentiating operator, highest precedence operator, inequality,
  limited type, logical operator, multiplying operator, operator, predefined
  operation, relational operator, unary adding operator]
     applied to an undefined value 3.2.1
     as an operation 3.3.3
     for an access type 3.8.2
     for an array type 3.6.2
     for a record type 3.7.4
     implicitly declared 3.3.3
     in a static expression 4.9
     of a derived type 3.4
     of a fixed point type 3.5.9   
     of a floating point type 3.5.7
     of an integer type 3.5.4
     raising an exception 11.4.1 

Predefined package 8.6; C
  [see also: ascii, library unit, predefined library package, standard]
     for input-output 14 

Predefined pragma
  [see: controlled, elaborate, inline, interface, list, memory_size,
  optimize, pack, page, priority, shared, storage_unit, suppress,
  system_name]

Predefined subprogram 8.6; C
  [see also: input-output subprogram, library unit, predefined generic
  library subprogram]

Predefined subtype 8.6; C
  [see also: field, natural, number_base, positive, priority]

Predefined type 8.6; C
  [see also: boolean, character, count, duration, float, integer, io_common,
  long_float, long_integer, priority, short_float, short_integer, string,
  system.address, system.name, time, universal_integer, universal_real]

Prefix 4.1; D
  [see also: appropriate for a type, function call, name, selected component,
  selector]
     in an attribute 4.1.4
     in an indexed component 4.1.1
     in a selected component 4.1.3
     in a slice 4.1.2
     that is a function call 4.1
     that is a name 4.1 

Primary 4.4
     in a factor 4.4
     in a static expression 4.9 

PRIORITY (predefined integer subtype) 9.8; C, 13.7
  [see also: Task priority] 

PRIORITY (predefined pragma) 9.8; B, 13.7
  [see also: Task priority] 

Private part (of a package) 7.2; 7.4.1, 7.4.3, D
  [see also: deferred constant declaration, private type declaration]

Private type 3.3, 7.4, 7.4.1; D
  [see also: class of type, derived type of a private type, limited private
  type, type with discriminants]
     as a generic actual type 12.3.2
     as a generic formal type 12.1.2
     as a parent type 3.4
     corresponding full type declaration 3.3.1
     formal parameter 6.2
     of a deferred constant 7.4; 3.2.1
     operation 7.4.2
 
Private type declaration 7.4; 7.4.1, 7.4.2
  [see also: private part (of a package), visible part (of a package)]
     as a generic type declaration 12.1
     as a portion of a declarative region 8.1
     including the word 'limited' 7.4.4 

Procedure 6.1; 6, D
  [see also: parameter and result type profile, parameter, subprogram]
     as a main program 10.1
     as a renaming of an entry 9.5
     renamed 8.5 

Procedure body
  [see: subprogram body]
     including code statements 13.8 

Procedure call 6.4; 6, D
  [see also: subprogram call] 

Procedure call statement 6.4
  [see also: actual parameter, statement]
     as a simple statement 5.1
     with a parameter of a derived type 3.4 

Procedure specification
  [see: subprogram specification] 

Processor 9 

Profile
  [see: parameter and result type profile, parameter type profile]

Program 10; D
  [see also: main program] 

Program legality 1.6 

Program library 10.1, 10.4; 10.5
     creation 10.4; 13.7
     manipulation and status 10.4 

Program optimization 11.6; 10.6

Program text 2.2, 10.1; 2.10

Program unit 6, 7, 9, 12; D
  [see also: address attribute, generic unit, library unit, package,
  subprogram, task unit]
     body separately compiled [see: subunit]
     entity denoted by an expanded name 4.1.3
     including a suppress pragma 11.7
     subject to an address clause 13.5
     with a separately compiled body 10.2 

PROGRAM_ERROR (predefined exception) 11.1
  [see also: erroneous execution, suppress pragma]
     raised by an erroneous program or incorrect order dependence 1.6; 11.1
     raised by a generic instantiation before elaboration of the body 3.9;
        12.1, 12.2
     raised by a subprogram call before elaboration of the body 3.9; 7.3
     raised by a task activation before elaboration of the body 3.9
     raised by reaching the end of a function body 6.5

Propagation of an exception
  [see: exception propogation] 

Proper body 3.9
     as a body 3.9
     in a subunit 10.2
     of a library unit separately compiled 10.1 

PUT (text_io procedure) 14.3 14.3.5; 14.3, 14.3.2, 14.3.10
     for character and string types 14.3.6
     for enumeration types 14.3.9
     for integer types 14.3.7
     for real types 14.3.8
     raising an exception 14.4    

Qualification 4.7
     as a basic operation 3.3.3; 3.3, 3.5.5, 3.5.8, 3.5.10, 3.6.2, 3.7.4,
       3.8.2, 7.4.2
     using a name of an enumeration type as qualifier 3.5.1

Qualified expression 4.7; D
     as a primary 4.4
     in an allocator 4.8
     in a case statement 5.4
     in a static expression 4.9
     qualification of an array aggregate 4.3.2
     to resolve an overloading ambiguity 6.6 

Queue of entry calls
  [see: entry queue] 

Queue of interrupts
  [see: entry queue] 

Quotation character 2.1
     in a string literal 2.6
     replacement by percent character 2.10

Radix of a floating point type 3.5.7; 13.7.3 

Raise statement 11.3; 11
  [see also: exception, statement]
     as a simple statement 5.1
     including the name of an exception 11.1 

Raising of an exception 11, 11.3; D
  [see also: exception]
     causing a transfer of control 5.1 

Range 3.5; D
  [see also: discrete range, null range]
     as a discrete range 3.6   
     in a record representation clause 13.4
     in a relation 4.4
     of an index subtype 3.6
     of an integer type containing the result of an operation 4.5
     of a predefined integer type 3.5.4
     of a real type containing the result of an operation 4.5.7
     yielded by an attribute 4.1.4 

RANGE (predefined attribute) 3.6.2; 4.1.4, A
     for an access value 3.8.2
     for an array type, 3.6.2 

Range constraint 3.5; D
  [see also: elaboration of...]
     ignored due to range_check suppression 11.7
     in a fixed point constraint 3.5.9
     in a floating point constraint 3.5.7
     in an integer type definition 3.5.4
     in a subtype indication 3.5; 3.3.2
     on a derived subtype 3.4
     violated 11.1 

Range_check
  [see: constraint_error, suppress] 

READ (input-output procedure)
     in an instance of direct_io 14.2.4; 14.1, 14.2, 14.2.5
     in an instance of sequential_io 14.2.2; 14.1, 14.2, 14.2.3

Reading the value of an object 6.2, 9.11

Real literal 2.4
  [see also: universal_real type]
     in based notation 2.4.2
     in decimal notation 2.4.1
     is of universal_real type 3.5.6 

Real type 3.5.6; 3.3, 3.5, D
  [see also: fixed point type, floating point type, model number, numeric
  type, safe number, scalar type, universal_real type]
     accuracy of an operation 4.5.7
     representation attribute 13.7.3
     result of a conversion from a numeric type 4.5.7; 4.6
     result of an operation out of range of the type 4.5.

Real type definition 3.5.6; 3.3.1, 3.5.7, 3.5.9
  [see also: elaboration of...] 

RECEIVE_CONTROL (low_level_io procedure) 14.6 

Reciprocal operation in exponentiation by a negative integer 4.5.6

Recompilation 10.3 

Record aggregate 4.3.1; 4.3
  [see also: aggregate]
     as a basic operation 3.3.3, 3.7.4
     in a code statement 13.8 

Record component
  [see: component, record type, selected component] 

Record representation clause 13.4
  [see also: first_bit attribute, last_bit attribute, position attribute]
     as a representation clause 13.1 

Record type 3.7; 3.3, D
  [see also: component, composite type, discriminant, matching components,
  subcomponent, type with discriminants, variant]
     formal parameter 6.2
     including a limited subcomponent 7.4.4
     operation 3.7.4

Record type declaration
  [see: record type definition, type declaration]
     as a declarative region 8.1
     determining the visibility of another declaration 8.3

Record type definition 3.7; 3.3.1
  [see also: component declaration] 

Recursive
     call of a subprogram 6.1, 12.1; 6.3.2
     generic instantiation 12.1, 12.3
     types 3.8.1; 3.3.1 

Reentrant subprogram 6.1 

Reference (parameter passing) 6.2 

Relation (in an expression) 4.4
    
Relational expression
  [see: relation, relational operator] 

Relational operation 4.5.2
     of a boolean type 3.5.3
     of a discrete type 3.5.5
     of a fixed point type 3.5.10
     of a real type 4.5.7
     of a scalar type 3.5 
     result for real operands 4.5.7

Relational operator 4.5; 4.5.2, C
  [see also: equality operator, inequality operator, ordering relation,
  overloading of an operator, predefined operator]
     for an access type 3.8.2
     for an array type 3.6.2
     for a private type 7.4.2
     for a record type 3.7.4
     for time predefined type 9.6
     in a relation 4.4
     overloaded 6.7 

Relative address of a component within a record
  [see: record representation clause] 

Rem operator 4.5.5
  [see also: multiplying operator] 

Remainder operation 4.5.5 

Renaming declaration 8.5; 4.1, 12.1.3 D
  [see also: name]
     as a basic declaration 3.1
     as a declarative region 8.1
     cannot rename a universal_fixed operation 4.5.5
     for an array object 3.6.1
     for an entry 9.5
     for a record object 3.7.2
     name declared is not allowed as a prefix of certain expanded names
        4.1.3
     to overload a library unit 10.1
     to overload a subunit 10.2
     to resolve an overloading ambiguity 6.6 

Rendezvous (of tasks) 9.5; 9, 9.7.1, 9.7.2, 9.7.3, D
     during which an exception is raised 11.5
     priority 9.8
     prohibited for an abnormal task 9.10

Replacement of characters in program text 2.10

Representation (of a type and its objects) 13.1
     recommendation by a pragma 13.1 

Representation attribute 13.7.2, 13.7.3
     as a forcing occurrence 13.1
     prefix which has a null value 4.1 

Representation clause 13.1; D, 13.6
  [see also: address clause, elaboration of..., enumeration representation
  clause, first named subtype, length clause, record representation clause,
  type]
     an an overload resolution context 8.7
     as a basic declarative item 3.9
     as a portion of a declarative region 8.1
     cannot include a forcing occurrence 13.1
     for a derived type 3.4
     for a private type 7.4.1
     implied for a derived type 3.4
     in an overload resolution context 8.7
     in a task specification 9.1 

Reserved word 2.9; 2.2, 2.3

RESET (input-output procedure)
     in an instance of direct_io 14.2.1; 14.2.5
     in an instance of sequential_io 14.2.1; 14.2.3
     in text_io 14.2.1; 14.3.1, 14.3.10

Resolution of overloading
  [see: overloading] 

Result subtype (of a function) 6.1
     of a return expression 5.8 

Result type profile
  [see: parameter and...]

Result type and overload resolution 6.6 

Result of a function
  [see: returned value]

Return
  [see: carriage return] 

Return statement 5.8
  [see also: function, statement]
     as a simple statement 5.1
     causing a loop to be exited 5.5
     causing a transfer of control 5.1
     completing block statement execution 9.4
     completing subprogram execution 9.4
     expression which is an array aggregate 4.3.2
     in a function body 6.5 

Returned value
  [see: function call]
     of a function call 5.8, 6.5; 8.5
     of an instance of a generic formal function 12.1.3
     of a main program 10.1
     of an operation 3.3.3
     of a predefined operator of an integer type 3.5.4
     of a predefined operator of a real type 3.5.6, 4.5.7

Right label bracket compound delimiter 2.2 

Right parenthesis
     character 2.1
     delimiter 2.2 

Rounding
     in a real-to-integer conversion 4.6
     of results of real operations 4.5.7; 13.7.3 

Run time check 11.7; 11.1    

Safe interval 4.5.7 

Safe number (of a real type) 3.5.6; 4.5.7
  [see also: model number, real type representation attribute, real type]
     limit to the result of a real operation 4.5.7
     of a fixed point type 3.5.9; 3.5.10
     of a floating point type 3.5.7; 3.5.8
     result of universal expression too large 4.10

SAFE_EMAX (predefined attribute) 3.5.8; A 

SAFE_LARGE (predefined attribute) 3.5.8, 3.5.10; A 

SAFE_SMALL (predefined attribute) 3.5.8, 3.5.10; A 

Satisfy (a constraint) 3.3; D
  [see also: constraint, subtype]
     a discriminant constraint 3.7.2  
     an index constraint 3.6.1
     a range constraint 3.5 

Scalar type 3.3, 3.5; D
  [see also: class of type, discrete type, enumeration type, fixed point
  type, floating point type, integer type, numeric type, real type, static
  Expression]
     as a generic parameter 12.1.2, 12.3.3
     formal parameter 6.2
     of a range in a membership test 4.5.2
     operation 3.5.5; 4.5.2 

Scheduling 9.8; 13.5.1 

Scheme
  [see: iteration scheme] 

Scope 8.2; 8.3, D
  [see also: basic operation, character literal, declaration, declarative
  region, generic instance, identifier, immediate scope, implicit
  declaration, operator symbol, overloading, visibility]
     of a use clause 8.4

Secondary unit 10.1
  [see also: compilation unit, library unit]
     compiled after the corresponding library unit or parent unit 10.3
     subject to pragma elaborate 10.5 

SECONDS (predefined function) 9.6 

Select alternative (of a selective wait) 9.7.1 

Select statement 9.7; 9.7.1, 9.7.2, 9.7.3
  [see also: statement, task, terminate alternative]
     as a compound statement 5.1
     in an abnormal task 9.10

Selected component 4.1.3; 8.3, D
  [see also: direct visibility, prefix, selector, visibility by selection,
  visibility]
     as a basic operation 3.3.3; 3.3, 3.7.4, 3.8.2, 7.4.2
     as a name 4.1
     as the name of an entry or entry family 9.5
     for selective visibility 8.3
     in a conforming construct 6.3.1
     starting with standard 8.6
     using a block name 5.6
     using a loop name 5.5
     whose prefix denotes a package 8.3
     whose prefix denotes a record object 8.3
     whose prefix denotes a task object 8.3 

Selection of an exception handler 11.4, 11.4.1, 11.4.2; 11.6

Selective visibility
  [see: visibility by selection] 

Selective wait 9.7.1; 9.7
  [see also: terminate alternative]
     accepting a conditional entry call 9.7.2
     accepting a timed entry call 9.7.3
     raising program_error 11.1 

Selector 4.1.3; D
  [see also: prefix, selected component] 

Semicolon character 2.1 

Semicolon delimiter 2.2
     followed by a pragma 2.8 

SEND_CONTROL (low_level_io procedure) 14.6 

Separate compilation 10, 10.1; 10.5
     of a proper body 3.9
     of a proper body declared in another compilation unit 10.2

Separator 2.2 

Sequence of statements 5.1
     in an accept statement 9.5
     in a basic loop 5.5
     in a block statement 5.6; 9.4
     in a case statement alternative 5.4
     in a conditional entry call 9.7.2
     in an exception handler 11.2
     in an if statement 5.3
     in a package body 7.1; 7.3
     in a selective wait statement 9.7.1
     in a subprogram body 6.3; 9.4, 13.8
     in a task body 9.1; 9.4
     in a timed entry call 9.7.3
     including a raise statement 11.3
     of code statements 13.8
     raising an exception 11.4.1 

Sequential access file 14.2; 14.1, 14.2.1 

Sequential execution
  [see: sequence of statements, statement] 

Sequential input-output 14.2.2; 14.2.1 

SEQUENTIAL_IO (predefined input-output generic package) 14.2, 14.2.2; 14,
14.1, 14.2.3, C
     exceptions 14.4; 14.5
     specification 14.2.3 

SET_COL (text_io procedure) 14.3.4; 14.3.10

SET_INDEX (input-output procedure) in an instance of direct_io 14.2.4; 14.2.5

SET_INPUT (text_io procedure) 14.3.2; 14.3.10
     raising an exception 14.4 

SET_LINE (text_io procedure) 14.3.4; 14.3.10

SET_LINE_LENGTH (text_io procedure) 14.3.3; 14.3.10
     raising an exception 14.4 

SET_OUTPUT (text_io procedure) 14.3.2; 14.3.10
     raising an exception 14.4 

SET_PAGE_LENGTH (text_io procedure) 14.3.3; 14.3.10
     raising an exception 14.4 

SHARED (predefined pragma) 9.11; B 

Shared variable (of two tasks) 9.11
  [see also: task] 

Sharp character 2.1
  [see also: based literal]
     replacement by colon character 2.10

Short circuit control form 4.5, 4.5.1; 4.4
     as a basic operation 3.3.3; 3.5.5
     in an expression 4.4 

SHORT_FLOAT (predefined type) 3.5.7; C 

SHORT_INTEGER (predefined type) 3.5.4; C 

Sign of a fixed point number 3.5.9 

Sign of a floating point number 3.5.7 

Significant decimal digits 3.5.7 

Simple expression 4.4
     as a choice 3.7.3
     as a choice in an aggregate 4.3
     as a range bound 3.5
     for an entry index in an accept statement 9.5
     in an address clause 13.5
     in a delay statement 9.6
     in a fixed accuracy definition 3.5.9
     in a floating accuracy definition 3.5.7
     in a record representation clause 13.4
     in a relation 4.4 

Simple name 4.1; 2.3, D
  [see also: block name, identifier, label, loop name, loop simple name,
  name, overloading, visibility]
     as a choice 3.7.3
     as a formal parameter 6.4
     as a label 5.1
     as a name 4.1
     before arrow compound delimiter 8.3
     in an accept statement 9.5
     in an address clause 13.5
     in an attribute designator 4.1.4
     in a conforming construct 6.3.1
     in a discriminant association 3.7.2
     in an enumeration representation clause 13.3
     in a package body 7.1
     in a selector 4.1.3
     in a suppress pragma 11.7
     in a task body 9.1
     in a variant part 3.7.3
     in a with clause 10.1.1
     versus identifier 3.1 

Simple statement 5.1
  [see also: statement] 
                           
SIZE (input-output function)
     in an instance of direct_io 14.2.4; 14.2.5 

SIZE (predefined attribute) 13.7.2; A
  [see also: storage bits]
     specified by a length clause 13.2 

SKIP_LINE (text_io procedure) 14.3.4; 14.3.10
     raising an exception 14.4 

SKIP_PAGE (text_io procedure) 14.3.4; 14.3.10
     raising an exception 14.4 

Slice 4.1.2
  [see also: array type]
     as a basic operation 3.3.3; 3.6.2, 3.8.2
     as a name 4.1
     as destination of an assignment 5.2.1
     of a constant 3.2.1
     of a derived type 3.4
     of an object as an object 3.2
     of a value of a generic formal array type 12.1.2
     of a variable 3.2.1
     starting with a prefix 4.1, 4.1.2 
      
SMALL (predefined attribute) 3.5.8, 3.5.10; A
  [see also: fixed point type]
     specified by a length clause 13.2 

Small of a fixed point number 3.5.9 

Some order not defined by the language
  [see: incorrect order dependence] 

Space character 2.1
  [see also: basic graphic character]
     as a separator 2.2
     in a comment 2.7
     not allowed in an identifier 2.3
     not allowed in a numeric literal 2.4.1 

Space character literal 2.5; 2.2 

Special character 2.1
  [see also: basic graphic character, other special character]
     in a delimiter 2.2 

Specification
  [see: declaration, discriminant specification, enumeration literal
  specification, generic specification, loop parameter specification,
  package specification, parameter specification, subprogram specification,
  task specification]

STANDARD (predefined package) 8.6; C
  [see also: library unit]
     as a declarative region 8.1
     enclosing the library units of a program 10.1.1; 10.1, 10.2
     including implicit declarations of fixed point cross-multiplication
        and cross-division 4.5.5

STANDARD_INPUT (text_io function) 14.3.2; 14.3.10

STANDARD_OUTPUT (text_io function) 14.3.2; 14.3.10

Star
  [see: double star]
     character 2.1
     delimiter 2.2 

Statement 5.1; 5, D
  [see also: abort statement, accept statement, address attribute,
  assignment statement, block statement, case statement, code statement,
  compound statement, delay statement, entry call statement, exit statement,
  goto statement, if statement, label, loop statement, null statement,
  procedure call statement, raise statement, return statement, select
  statement, sequence of statements, simple statement, target statement]
     allowed in an exception handler 11.2
     as an overload resolution context 8.7
     optimized 10.6
     raising an exception 11.4.1; 11.4
     that cannot be reached 10.6 

Statement alternative
  [see: case statement alternative] 

Static constraint 4.9
     on a subcomponent subject to a component clause 13.4
     on a type 3.5.4, 3.5.7, 3.5.9, 13.2 

Static discrete range 4.9
     as a choice of an aggregate 4.3.2
     as a choice of a case statement 5.4
     as a choice of a variant part 3.7.3 

Static expression 4.9; 8.7
     as a bound in an integer type definition 3.5.4
     as a choice in a case statement 5.4
     as a choice of a variant part 3.7.3
     for a choice in a record aggregate 4.3.2
     for a discriminant in a record aggregate 4.3.1
     in an attribute designator 4.1.4
     in an enumeration representation clause 13.3   
     in a fixed accuracy definition 3.5.9
     in a floating accuracy definition 3.5.7
     in a generic unit 12.1
     in a length clause 13.2
     in a number declaration 3.2, 3.2.2
     in a record representation clause 13.4
     in priority pragma 9.8
     whose type is a universal type 4.10

Static others choice 4.3.2 

Static subtype 4.9
     of a discriminant 3.7.3
     of the expression in a case statement 5.4 

STATUS_ERROR (input-output exception) 14.4; 14.2.1, 14.2.2, 14.2.3, 14.2.4,
14.2.5, 14.3.3, 14.3.4, 14.3.5, 14.3.10, 14.5

Storage address of a component 13.4
  [see also: address clause] 

Storage bits
     allocated to an object or type 13.2; 13.7.2 [see also: size]
     of a record component relative to a storage unit 13.4
     size of a storage unit 13.7 

Storage deallocation
  [see: unchecked_deallocation] 

Storage minumization
  [see: pack pragma] 

Storage reclamation 4.8 

Storage representation of a record 13.4 

Storage unit 13.7
     offset to the start of a record component 13.4
     size of a storage unit in bits 13.7 

Storage units allocated
  [see: storage_size]
     to a collection 13.2; 4.8, 11.1, 13.7.2
     to a task activation 13.2; 9.9, 11.1, 13.7.2 

Storage_check
  [see: program_error exception, suppress] 

STORAGE_ERROR (predefined exception)  11.1
     raised by an allocator exceeding the allocated storage 4.8; 11.1
     raised by an elaboration of a declarative item 11.1
     raised by a task activation exceeding the allocated storage 11.1
     raised by the execution of a subprogram call 11.1 

STORAGE_SIZE (predefined attribute) 13.7.2; A
  [see also: storage units allocated]
     for an access type 3.8.2
     for a task object or task type 9.9
     specified by a length clause 13.2 

STORAGE_UNIT (predefined named number) 
  [see: system.storage_unit] 

STORAGE_UNIT (predefined pragma) 13.7; B
  [see also: system.storage_unit] 

STRING (predefined type) 3.6.3; C
  [see also: predefined type]
     as the parameter of value attribute 3.5.5
     as the result of image attribute 3.5.5 

String bracket 2.6; 2.10

String literal 2.6, 4.2; 2.2, 3.6.3
  [see also: overloading of..., percent mark character, quotation character]
     as a basic operation 3.3.3, 4.2; 3.6.2
     as an operator symbol 6.1
     as a primary 4.4
     may not be the argument of a conversion 4.6
     replaced by a catenation of basic characters 2.10

Stub
  [see: body stub] 

Subaggregate 4.3.2 

Subcomponent 3.3; D
  [see also: component, composite type, default expression, discriminant,
  object]
     depending on a discriminant 3.7.1; 5.2, 6.2, 8.5
     of a component for which a component clause is given 13.4 
     renamed 8.5
     that is a task object 9.2; 9.3
     whose type is a limited type 7.4.4
     whose type is a private type 7.4.1

Subprogram 6; D
  [see also: actual parameter, completed subprogram, derived subprogram,
  entry, formal parameter, function, library unit, overloading of...,
  parameter and result type profile, parameter, predefined subprogram,
  procedure, program unit]
     as a generic instance 12.3; 12
     as a main program 10.1
     as an operation 3.3.3; 7.4.2
     including a raise statement 11.3
     of a derived type 3.4
     overloaded 6.6
     renamed 8.5
     subject to an address clause 13.5
     subject to an inline pragma 6.3.2
     subject to an interface pragma 13.9
     subject to a representation clause 13.1
     subject to a suppress pragma 11.7
     with a separately compiled body 10.2  

Subprogram body 6.3; 6, D
  [see also: body stub]
     as a generic body 12.2
     as a library unit 10.1
     as a proper body 3.9
     as a secondary unit 10.1
     as a secondary unit compiled after the corresponding library unit 10.3
     having dependent tasks 9.4
     in a package body 7.1
     including an exception handler 11.2; 11
     including an exit statement 5.7
     including a goto statement 5.9
     including an implicit declaration 5.1
     including a return statement 5.8
     including code statements must be a procedure body 13.8
     inlined in place of each call 6.3.2
     must be in the same declarative part as the declaration 3.9, 7.1
     not allowed for a subprogram subject to an interface pragma 13.9
     not yet elaborated at a call 3.9
     raising an exception 11.4.1, 11.4.2
     recompiled 10.3 

Subprogram call 6.4; 6, 6.3, 12.3
  [see also: actual parameter, entry call statement, entry call, function
  call, procedure call statement, procedure call]
     before elaboration of the body 3.9, 11.1
     statement replaced by an inlining of the body 6.3.2
     statement with a default actual parameter 6.4.2
     to a derived subprogram 3.4
     to a generic instance 12

Subprogram declaration 6.1; 6, D
     and body as a declarative region 8.1
     as a basic declaration 3.1
     as a later declarative item 3.9
     as a library unit 10.1
     as an overloaded declaration 8.3
     implied by the body 6.3, 10.1
     in a package specification 7.1
     made directly visible by a use clause 8.4
     of an operator 6.7
     recompiled 10.3 

Subprogram specification 6.1 
     and  forcing occurrence 13.1
     conforming to another 6.3.1
     for a function 6.5
     in a body stub 10.2
     in a generic declaration 12.1; 12.1.3
     in a renaming declaration 8.5
     in a subprogram body 6.3
     including the name of a private type 7.4.1
     of a derived subprogram 3.4 

Subtraction operation 4.5.3
     for a real type 4.5.7 

Subtype 3.3, 3.3.2; D
  [see also: attribute of..., base attribute, constrained subtype,
  constraint, first named subtype, operation of..., result subtype,
  satisfy, size attribute, static subtype, type, unconstrained subtype]
     declared by a numeric type declaration 3.5.4, 3.5.7, 3.5.9
     in a membership test 4.5.2
     name [see: name of a subtype, type_mark of a subtype]
     not considered in overload resolution 8.7
     of an access type 3.8
     of an actual parameter 6.4.1
     of an array type [see: constrained array type, index constraint]
     of a component of an array 3.6
     of a component of a record 3.7
     of a constant in a static expression 4.9
     of a discriminant of a generic formal type 12.3.2
     of a formal parameter 6.4.1
     of a formal parameter or result of a renamed subprogram or entry 8.5
     of a generic formal type 12.1.2
     of an index of a generic formal array type 12.3.4
     of an object [see: elaboration of...]
     of a private type 7.4, 7.4.1
     of a real type 3.5.7, 3.5.9; 3.5.6, 4.5.7
     of a record type [see: constrained record type, discriminant constraint]
     of a scalar type 3.5
     of a task type 9.2
     of a variable 5.2
     subject to a representation clause 13.1 

Subtype conversion 4.6
  [see also: conversion operation, explicit conversion, implicit conversion,
  type conversion]
     in an array assignment 5.2.1; 5.2
     to a real type 4.5.7 

Subtype declaration 3.3.2; 3.1,
     and forcing occurrences 13.1
     as a basic declaration 3.1
     including the name of a private type 7.4.1 

Subtype definition
  [see: component subtype definition, dependence on a discriminant, index
  subtype definition]

Subtype indication 3.3.2
  [see also: elaboration of...]
     as a component subtype indication 3.7
     as a discrete range 3.6
     for a subtype of a generic formal type 12.1.2
     in an access type definition 3.8
     in an allocator 4.8
     in an array type definition 3.6
     in a component declaration 3.7
     in a constrained array definition 3.6
     in a derived type definition 3.4
     in a generic formal part 12.1
     in an object declaration 3.2, 3.2.1
     in an unconstrained array definition 3.6
     including a fixed point constraint 3.5.9
     including a floating point constraint 3.5.7
     with a range constraint 3.5 

Subunit 10.2; D
  [see also: library unit]
     as a compilation unit 10.4
     as a library unit 10.4
     as a secondary unit 10.1
     compiled after the corresponding parent unit 10.3
     not allowed for a subprogram subject to an interface pragma 13.9
     of a compilation unit subject to a context clause 10.1.1
     raising an exception 11.4.1, 11.4.2
     recompiled (does not affect other compilation units) 10.3

SUCC (predefined attribute) 3.5.5; A, 13.3 

Successor
  [see: succ attribute] 

SUPPRESS (predefined pragma) 11.7; B, 11.1 
   
Symbol
  [see: graphical symbol, operator symbol] 

Synchronization of tasks
  [see: task synchronization] 

Syntactic category 1.5 

Syntax notation 1.5 

Syntax rule 1.5; E 

SYSTEM (predefined library package) 13.7; C, F

System dependent F
     attribute 13.4
     constant 13.7
     named number 13.7, 13.7.1
     record component 13.4
     type 13.7 

SYSTEM.ADDRESS (predefined type) 13.7; 13.5
  [see also: address attribute, address clause] 

SYSTEM.FINE_DELTA (predefined named number) 13.7.1 

SYSTEM.MAX_DIGITS (predefined named number) 13.7.1 limit on the significant
  digits of a floating point type 3.5.7

SYSTEM.MAX_INT (predefined named number) 13.7.1; 3.5.4
     exceeded by the value of a universal expression 4.10

SYSTEM.MAX_MANTISSA (predefined named number) 13.7.1 

SYSTEM.MEMORY_SIZE (predefined named number) 13.7 

SYSTEM.MIN_INT (predefined named number) 13.7.1; 3.5.4
     greater than the value of a universal expression 4.10

SYSTEM.NAME (predefined type) 13.7 

SYSTEM.STORAGE_UNIT (predefined named number) 13.7; 13.4

SYSTEM.SYSTEM_NAME (predefined constant) 13.7
  [see also: system_name] 

SYSTEM.TICK (predefined named number) 13.7.1; 9.6 

SYSTEM_NAME (predefined pragma) 13.7; B
  [see also: system.system_name predefined constant]

Tabulation
  [see: horizontal tabulation, vertical tabulation] 

Target statement (of a goto statement) 5.9 

Target type of a conversion 4.6 

Task 9; D
  [see also: abnormal task, abort statement, accept statement, communication
  between..., completed task, delay statement, dependent task, entry (of a
  task), entry call statement, rendezvous, select statement, selective wait,
  shared variable, single task, terminated task]
     calling the main program 10.1
     raising an exception 11.5
     scheduling 9.8 
     suspension awaiting a rendezvous 9.5
     suspension by a selective wait 9.7.1
     suspension of an abnormal task 9.10

Task activation 9.3
  [see also: length clause, storage units allocated, storage_size attribute]
     before elaboration of the body 3.9
     causing synchronization 9.10, 9.11
     not started for an abnormal task 9.10
     of a task with no task body 11.1

Task body 9.1; 9, D
  [see also: body stub, elaboration of...]
     as a proper body 3.9
     in a package body 7.1
     including an exception handler 11.2; 11
     including an exit statement 5.7
     including a goto statement 5.9
     including an implicit declaration 5.1
     must be in the same declarative part as the declaration 3.9, 7.1
     not yet elaborated at an activation 3.9
     raising an exception 11.4.1, 11.4.2
     specifying the execution of a task 9.2, 9.3 

Task communication
  [see: roundezvous]

Task completion
  [see: completed task] 

Task declaration 9.1
     and body as a declarative region 8.1
     as a basic declaration 3.1
     as a later declarative item 3.9
     elaboration raising an exception 11.4.2
     in a package specification 7.1

Task dependence
  [see: dependent task] 

Task designated
     by a formal parameter 6.2
     by a value of a task type 9.1; 9.2, 9.4, 9.5 

Task execution 9.3

Task object 9.2; 9.1, 9.5
  [see also: attribute of..., task activation]
     designated by an access value 9.2
     determining task dependence 9.4
     renamed 8.5 

Task priority 9.8
  [see also: priority pragma, priority subtype]
     of a task with an interrupt entry 13.5.1 

Task specification 9.1; 9, D
  [see also: elaboration] 
     including an entry declaration 9.5
     including a priority pragma 9.8
     including a representation clause 13.1 

Task synchronization 9.5; 9.11

Task termination
  [see: terminated task] 

Task type 9.1, 9.2; D
  [see also: attribute of..., class of type, derived type of a task type,
  limited type]
     completing an incomplete type definition 3.8.1
     formal parameter 6.2
     object initialization 3.2.1
     value designating a task object 3.2.1, 9.1, 9.2

Task unit 9.1; 9
  [see also: program unit]
     declaration determining the visibility of another declaration 8.3
     including a raise statement 11.3
     subject to an address clause 13.5
     subject to a representation clause 13.1
     subject to a suppress pragma 11.7
     with a separately compiled body 10.2 

TASKING_ERROR (predefined exception) 11.1
  [see also: suppress pragme]
     raised by an entry call to an abnormal task 9.10, 11.5
     raised by an entry call to a completed task 9.5, 9.7.2, 9.7.3, 11.5
     raised by an exception in the task body 11.4.2
     raised by failure of an activation 9.3; 11.4.2 

Template
  [see: generic unit] 

Term 4.4
     in a simple expression 4.4 

Terminate alternative (of a selective wait) 9.7.1
     [see: select statement]
     causing a transfer of control 5.1
     in a select statement causing a loop to be exited 5.5
     selection 9.4
     selection in the presence of an accept alternative for an interrupt
        entry 13.5.1

TERMINATED (predefined attribute) for a task object 9.9; A

Terminated task 9.4; 9.3, 9.9
  [see also: completed task]
     not becoming abnormal 9.10
     object or subcomponent of an object designated by an access value 4.8
     termination of a task during its activation 9.3 

Terminator
  [see: file terminator, line terminator, page terminator]

Text input-output 14.3; 14.2.1 

Text of a program 2.2, 10.1 

TEXT_IO (predefined input-output package)
        14.3; C, 14, 14.1, 14.3.9, 14.3.10
     exceptions 14.4; 14.5
     specification 14.3.10

TICK
  [see: system.tick] 

TIME (predefined type) 9.6
  [see also: clock, date, day, time_of, month, system.tick, year]

TIME_OF (predefined function) 9.6 

Timed entry call 9.7.3; 9.7
     and renamed entries 8.5
     subject to an address clause 13.5.1 

Times operator
  [see: multiplying operator] 

Transfer of control
  [see: exception, exit statement, goto statement, return statement,
  terminate alternative]
                                                
TRUE boolean enumeration literal 3.5.3; C 

Type 3.3; D
  [see also: access type, appropriate for a type, array type, attribute
  of..., base attribute, base type, boolean type, character type, class
  of type, composite type, constrained type, derived type, discrete type,
  discriminant of..., enumeration type, fixed point type, floating point
  type, forcing occurrence, generic actual type, generic formal type,
  integer type, limited private type, limited type, numeric type, operation
  of..., parent type, predefined type, private type, real type, record type,
  representation clause, scalar type, size attribute, storage allocated,
  subtype, unconstrained subtype, unconstrained type, universal type]
     name 3.3.1
     of an actual parameter 6.4.1
     of an aggregate 4.3.1, 4.3.2
     of an array component of a generic formal array type 12.3.4
     of an array index of a generic formal array type 12.3.4
     of a case statement expression 5.4
     of a condition 5.3
     of a declared object 3.2, 3.2.1
     of a discriminant of a generic formal private type 12.3.2
     of an expression 4.4
     of a file 14.1
     of a formal parameter of a generic formal subprogram 12.1.3
     of a generic actual object 12.3.1
     of a generic formal object 12.1.1; 12.3.1
     of an index 4.1.1
     of a loop parameter 5.5
     of a named number 3.2, 3.2.2
     of an object designated by a generic formal access types 12.3.5
     of a primary in an expression 4.4
     of a shared variable 9.11
     of a slice 4.1.2
     of a task object 9.2
     of a universal expression 4.10
     of a value 3.3; 3.2
     of discriminants of a generic formal object and the matching actual
        object 12.3.2
     of the literal null 4.2
     of the result of a generic formal function 12.1.3
     renamed 8.5
     subject to a representation clause 13.1; 13.6
     subject to a suppress pragma 11.7
     yielded by an attribute 4.1.4 

Type conversion 4.6
  [see also: conversion operator, conversion, explicit conversion, subtype
  conversion, unchecked_conversion]
     as an actual parameter 6.4, 6.4.1
     as a primary 4.4
     in a static expression 4.9
     to a real type 4.5.7 

Type declaration 3.3.1
  [see also: elaboration of..., incomplete type declaration, private type
  declaration]
     as a basic declaration 3.1
     as a full declaration 7.4.1
     implicitly declaring operations 3.3.3
     in a package specification 7.1
     including the name of a private type 7.4.1
     of a fixed point type 3.5.9
     of a floating point type 3.5.7
     of an integer type 3.5.4
     of a subtype 13.1 

Type definition 3.3.1; D
  [see also: access type definition, array type definition, derived type
  definition, elaboration of..., enumeration type definition, generic type
  definition, integer type definition, real type definition, record type
  definition]

Type mark (denoting a type or subtype) 3.3.2
     as a generic actual parameter 12.3
     in an allocator 4.8
     in a code statement 13.8
     in a conversion 4.6
     in a deferred constant declaration 7.4
     in a discriminant specification 3.7.1
     in a generic formal part 12.1, 12.3
     in a generic parameter declaration 12.3.1
     in an index subtype definition 3.6
     in a parameter specification 6.1; 6.2
     in a qualified expression 4.7
     in a relation 4.4
     in a renaming declaration 8.5
     in a subprogram specification 6.1
     of a formal parameter of a generic formal subprogram 12.1.3
     of a generic formal array type 12.1.2
     of a static scalar subtype 4.9
     of the result of a generic formal function 12.1.3 

Type with discriminants 3.3; 3.3.1, 3.3.2, 3.7, 3.7.1, 7.4, 7.4.1
  [see also: private type, record type]
     as an actual to a formal private type 12.3.2
     as the component type of an array that is the operand of a conversion
        4.6

                                      
Unary adding operator 4.4, 4.5, C; 4.5.4
  [see also: arithmetic operator, overloading of an operator, predefined
  operator]
     as an operation of a discrete type 3.5.5
     in a simple expression 4.4
     overloaded 6.7 

Unary operator 4.5; 3.5.5. 3.5.8, 3.5.10, 3.6.2,  4.5.4, 4.5.6, C
  [see also: highest precedence operator, unary adding operator]
        as an operation of a fixed point type 3.5.1 4

UNCHECKED_CONVERSION (predefined generic library function) 13.10.2; C, 13.10

UNCHECKED_DEALLOCATION (predefined generic library procedure) 13.10.1; 4.8,
   C, 13.1 4

Unconditional termination of a task
  [see: abnormal task, abort statement] 

Unconstrained array definition 3.6 

Unconstrained array type 3.6
     as an actual to a formal private type 12.3.2
     formal parameter 6.2
     subject to a length clause 13.2 

Unconstrained subtype 3.3, 3.3.2
  [see also: constrained subtype, constraint, subtype, type]
     indication in a generic unit 12.3.2 

Unconstrained type 3.3; 3.2.1, 3.6, 3.6.1, 3.7, 3.7.2
     formal parameter 6.2
     with discriminants 6.4.1, 12.3.2 
                                     
Unconstrained variable 3.3, 3.6, 3.7; 12.3.1
     as a subcomponent [see: subcomponent] 

Undefined value
     of a scalar parameter 6.2
     of a scalar variable 3.2.1

Underline character 2.1
     in a based literal 2.4.2
     in a decimal literal 2.4.1
     in an identifier 2.3 

Unhandled exception 11.4.1

Unit
  [see: compilation unit, generic unit, library
        unit, program unit, storage unit, task unit] 

Universal expression 4.10
     assigned 5.2
     in an attribute designator 4.1.4
     of a real type implicitly converted 4.5.7
     that is static 4.10

Universal type 4.10
  [see also: conversion, implicit conversion]
     expression [see: expression, numeric literal]
     of a named number 3.2.2; 3.2
     result of an attribute [see: attribute] 

UNIVERSAL_FIXED (predefined type) 3.5.9
     result of fixed point multiplying operators 4.5.5

UNIVERSAL_INTEGER (predefined type) 3.5.4, 4.10; C
  [see also: integer literal]
     argument to a conversion 3.3.3, 4.6
     attribute 3.5.5, 13.7.1, 13.7.2, 13.7.3; 9.9
     bounds of a discrete range 3.6.1
     bounds of a loop parameter 5.5
     codes representing enumeration type values 13.3
     converted to an integer type 3.5.5
     of integer literals 2.4, 4.2
     result of an operation 4.10; 4.5    

UNIVERSAL_REAL (predefined type) 3.5.6, 4.10
  [see also: real literal]
     argument to a conversion 3.3.3, 4.6
     attribute 13.7.1
     converted to a fixed point type 3.5.10
     converted to a floating point type 3.5.8
     of real literals 2.4, 4.2
     result of an operation 4.10; 4.5 

Updating the value of an object 6.2 

Upper bound
  [see: bound, last attribute] 

Upper case letter 2.1
  [see also: basic graphic character]
     A to F in a based literal 2.4.2
     E in a decimal literal 2.4.1
     in an identifier 2.3 

Urgency of a task 
  [see: task priority]

Use clause (to achieve direct visibility) 8.4; 8.3, D
  [see also: context clause]
     as a basic declarative item 3.9
     as a later declarative item 3.9
     in a code procedure body 13.8
     in a context clause of a compilation unit 10.1.1
     in a context clause of a subunit 10.2
     inserted by the environment 10.4 

USE_ERROR (input-output exception) 14.4; 14.2.1, 14.2.3, 14.2.5, 14.3.3,
14.3.10, 14.5

VAL (predefined attribute) 3.5.5; A

Value
  [see: assignment, evaluation, expression, initial value, returned value,
  subtype, task designated..., type]
     in a constant 3.2.1; 3.2
     in a task object 9.2
     in a variable 3.2.1, 5.2; 3.2
     of an access type [see: object designated, task object designated]
     of an array type 3.6; 3.6.1 [see also: array, slice]
     of a based literal 2.4.2
     of a boolean type 3.5.3
     of a character literal 2.5
     of a character type 3.5.2; 2.5, 2.6
     of a decimal literal 2.4.1
     of a fixed point type 3.5.9, 4.5.7
     of a floating point type 3.5.7, 4.5.7
     of a record type 3.7
     of a record type with discriminants 3.7.1
     of a string literal 2.6; 2.10
     of a string type 3.6.3; 2.6
     of a task type [see: task designated]
     returned by a function call [see: returned value] 

VALUE (predefined attribute) 3.5.5; A 

Variable 3.2.1; D
  [see also: object, shared variable]
     as an actual parameter 6.2
     declared in a package body 7.3
     formal parameter 6.2
     in an assignment statement 5.2
     of an array type as destination of an assignment 5.2.1
     of a private type 7.4.1
     renamed 8.5
     that is a slice 4.1.2 

Variable declaration 3.2.1 

Variant 3.7.3; 4.1.3
  [see also: component clause, record type]
     in a variant part 3.7.3 

Variant part 3.7.3; D
  [see also: dependence on a discriminant]
     in a component list 3.7
     in a record aggregate 4.3.1 

Vertical bar character 2.1
     replacement by exclamation character 2.10

Vertical bar delimiter 2.2 

Vertical tabulation format effector 2.1 

Violation of a constraint
  [see: constraint_error exception] 

Visibility 8.3; 8.2, D
  [see also: direct visibility, hiding, identifier, name, operation,
  overloading]
     and renaming 8.5
     determining multiple meanings of an identifier 8.4, 8.7; 8.5
     determining order of compilation 10.3
     due to a use clause 8.4
     of a basic operation 8.3
     of a character literal 8.3
     of a default for a generic formal subprogram 12.3.6
     of a generic formal parameter 12.3
     of a library unit due to a with clause 8.6, 10.1.1
     of a name of an exception 11.2
     of an operation declared in a package 7.4.2
     of an operator symbol 8.3
     of a renaming declaration 8.5
     of a subprogram declared in a package 6.3
     of declarations in a package body 7.3
     of declarations in a package specification 7.2
     of declarations in the package system 13.7    
     within a subunit 10.2 

Visibility by selection 8.3
  [see also: basic operation, character literal, operation, operator
  symbol, selected component]

Visible part (of a package) 7.2; 3.2.1, 7.4, 7.4.1, 7.4.3, D
  [see also: deferred constant declaration, private type declaration]
     expanded name denoting a declaration in a visible part 8.2
     scope of a declaration in a visible part 3.1.3
     use clause naming the package 8.4
     visibility of a declaration in a visible part 8.3

Wait
  [see: selective wait, task suspension] 

While loop
  [see: loop statement] 

WIDTH (predefined attribute) 3.5.5; A 

With clause 10.1.1; D
  [see also: context clause]
     determining order of compilation 10.3
     determining the implicit order of library units 8.6
     in a context clause of a compilation unit 10.1.1
     in a context clause of a subunit 10.2
     inserted by the environment 10.4
     leading to direct visibility 8.3 

WRITE (input-output procedure)
     in an instance of direct_io 14.2.4; 14.1, 14.2, 14.2.5
     in an instance of sequential_io 14.2.2; 14.1, 14.2, 14.2.3

Writing an output file 14.1, 14.2.1, 14.3.4    

Xor operator
  [see: logical operator]    

YEAR (predefined function) 9.6    


